@page "/inbox"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using BlazorBugTracker.Services
@using BlazorBugTracker.Data
@inject ApplicationDbContext _context  
@inject IImageService _imageService 
@inject IHttpContextAccessor _httpContextAccessor
@inject HubConnectionBuilder HubConnectionBuilder
@inject UserManager<CustomUser> _userManager
@inject IJSRuntime JSRuntime 
<div class="container-fluid pr-0 pl-0">
    <div class="row">
        <div class="col pr-0">
            <div id="frame" style="margin-right:0;">
                <div id="sidepanel">
                    <div id="profile">
                        <a href="/identity/account/manage">
                            <div class="wrap">

                                <img id="profile-img" src="@_imageService.DecodeFileAvatar(user.ImageData, user.ContentType)" class="online" alt="" />
                                <p>@user.FullName</p>
                            </div>
                        </a>
                      
                    </div>
                    <div id="search">
                        <label for=""><i class="fa fa-search" aria-hidden="true"></i></label>
                        <input type="text" placeholder="Search contacts..." />
                    </div>
                    <div id="contacts">
                        <ul>
                            @foreach (var item in UserList)
                            {
                                <li class="contact">
                                    <div class="wrap">
                                        <span class="contact-status online"></span>
                                        <img src="img/avatar.png" alt="" />
                                        <div class="meta">
                                            <p class="name">@item.FullName</p>
                                            <p class="preview">You just got LITT up, Mike.</p>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                    <div id="bottom-bar">
                        <button id="addcontact"><i class="fa fa-user-plus fa-fw" aria-hidden="true"></i> <span>Add contact</span></button>
                        <button id="settings"><i class="fa fa-cog fa-fw" aria-hidden="true"></i> <span>Settings</span></button>
                    </div>
                </div>
                <div class="content">
                    <div class="contact-profile">
                        <img src="img/avatar.png" alt="" />
                        <p>Harvey Specter</p>
                        <div class="social-media">
                            <i class="fa fa-facebook" aria-hidden="true"></i>
                            <i class="fa fa-twitter" aria-hidden="true"></i>
                            <i class="fa fa-instagram" aria-hidden="true"></i>
                        </div>
                    </div>
                    <div class="messages pr-0" id="bottom222">
                        <ul>


                            @foreach (var item in _messages)
                            {
                                @if (item.IsNotice)
                                {
                                    <li class="sent">
                                        <img src="img/avatar.png" alt="" />
                                        <p>@item.Body!</p>
                                    </li>
                                }
                                else
                                {
                                    <li class="@item.CSS">
                                        <img src="img/avatar.png" alt="" />
                                        <p>@item.Body</p>
                                    </li>

                                }
                            }
                        </ul>
                    </div>
                    <div class="message-input">
                        <div class="wrap">
                            <EditForm Model="SendMessage" OnValidSubmit="SendMessageFormAsync">
                                <input id="inbox" type="text" @bind="@SendMessage.Message" placeholder="Write your message..." />
                                <i class="fa fa-paperclip attachment" aria-hidden="true"></i>
                                <button class="submit" type="submit"><i class="fa fa-paper-plane" aria-hidden="true"></i></button>
                            </EditForm>
                           
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




@code {

    private ChatHub Chathub;

    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    public Models.CustomUser user = new();
    private List<Message> _messages = new List<Message>();
    public Models.SendMessageModel SendMessage = new();
    public List<Models.CustomUser> UserList = new();

    private string _hubUrl;
    private HubConnection _hubConnection;
    protected override async Task OnInitializedAsync()
    {
        UserList = _context.Users.ToList();
        await Chat();
    }
    public async Task Chat()
    {
        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = await _userManager.GetUserAsync(currrentUser);
        _username = user.FullName;
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = NavigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            await _hubConnection.StartAsync();
            await _hubConnection.SendAsync("Broadcast", user.FullName, "Start Chatting !!");
            await Focus("inbox");

        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(_newMessage))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }
    private async Task SendMessageFormAsync()
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(SendMessage.Message))
        {
            await _hubConnection.SendAsync("Broadcast", user.FullName, SendMessage.Message);
            await Focus("inbox");

            SendMessage.Message = null;
        }
    }


    private async Task SendAsync2()
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(_newMessage))
        {
            await _hubConnection.SendAsync("Broadcast", _username, SendMessage.Message);
            //await Chathub.SendToUser(user.Id, SendMessage.Message);
            SendMessage.Message = string.Empty;
        }
    }

    public async Task Focus(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("focusTo", elementId);
    }
  

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "replies" : "sent";
    }
}