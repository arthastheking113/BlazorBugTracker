@page "/project/details/{ProjectId}"


@using BlazorBugTracker.Services
@using BlazorBugTracker.Service
@using BlazorBugTracker.Data
@using BlazorBugTracker.Data.Enums
@inject ApplicationDbContext _context
@inject ICustomProjectService _projectService
@inject ICustomRoleService _roleService
@using Microsoft.AspNetCore.Identity
@inject IImageService _imageService
@inject UserManager<CustomUser> _userManager
@inject ICustomFileService _customFileService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime
@inject IEmailSender _emailSender

@if (currentProject is null)
{
    <div class="loader">Loading...</div>
}
else
{
    <section class="content">

        <!-- Default box -->
        <div class="card">
            <div class="card-header bg-dark">
                <div class="row">
                    <div class="col">
                        <h3 class="card-title">View Project Details</h3>
                    </div>
                </div>

            </div>
            <div class="card-header">
                <div class="row">
                    <div class="col">
                        @if (IsInRoleAdmin || IsProjectManager)
                        {
                            <a href="/project" class="btn btn-outline-secondary mr-1"> <i class="fas fa-arrow-circle-left"></i> Back</a>
                        }

                        <button type="button" @onclick="OpenCreateDialog" class="btn btn-outline-success mr-1 ml-1">
                            <i class="fas fa-plus-square"></i> Create New Ticket
                        </button>


                        @if (IsInRoleAdmin || IsProjectManager)
                        {
                            <button class="btn btn-outline-info mr-1 ml-1" @onclick="OpenEditProjectDialog"><i class="fas fa-pencil-alt"></i> Edit Project</button>
                        }
                        <a class="btn btn-outline-primary ml-1" href="/ticket"><i class="fas fa-ticket-alt"></i> View All Tickets On System</a>

                    </div>
                    <div class="col text-right">
                        <p style="margin-top: 1%; margin-bottom: 0; color: black; font-size: 14px; font-weight: 800; letter-spacing: 1px; text-transform: uppercase; border-radius: 0; font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; ">Created on: @currentProject.Created.ToString("dd MMMM yyyy - hh:mm tt")</p>
                    </div>
                </div>

            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12 col-md-12 col-lg-8 order-2 order-md-1">
                        <div class="row" style="border-bottom:1px solid;">
                            <div class="col-12 col-sm-4">
                                <a class="text-dark" href="/project/@currentProject.Id/ticket">
                                    <div class="info-box" style="cursor:pointer;">
                                        <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-poll"></i></span>
                                        <div class="info-box-content">
                                            <span class="info-box-text">Total Tickets</span>
                                            <span class="info-box-number">
                                                @ticketInProject.Count
                                                <small>Tickets</small>
                                            </span>
                                        </div>
                                        <!-- /.info-box-content -->
                                    </div>
                                    <!-- /.info-box -->
                                </a>

                            </div>
                            <div class="col-12 col-sm-4">
                                <a class="text-dark" href="/project/@currentProject.Id/ticket">
                                    <div class="info-box" style="cursor:pointer;">
                                        <span class="info-box-icon bg-warning elevation-1"><i class="fas fa-exclamation"></i></span>
                                        <div class="info-box-content">
                                            <span class="info-box-text">Un-Assigned Tickets</span>
                                            <span class="info-box-number">
                                                @ticketInProject.Where(t => t.IsAssigned == false).Count()
                                                <small>Tickets</small>
                                            </span>
                                        </div>
                                        <!-- /.info-box-content -->
                                    </div>
                                    <!-- /.info-box -->
                                </a>

                            </div>
                            <div class="col-12 col-sm-4">
                                <a class="text-dark" href="/project/@currentProject.Id/ticket">
                                    <div class="info-box" style="cursor:pointer;">
                                        <span class="info-box-icon bg-cyan elevation-1"><i class="fas fa-check-circle"></i></span>
                                        <div class="info-box-content">
                                            <span class="info-box-text">Closed Tickets</span>
                                            <span class="info-box-number">
                                                @ticketInProject.Where(t => t.Status.Name == "Closed").ToList().Count
                                                <small>Tickets</small>
                                            </span>
                                        </div>
                                        <!-- /.info-box-content -->
                                    </div>
                                    <!-- /.info-box -->
                                </a>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <div class="row mb-0">
                                    <div class="col text-left">
                                        <h4 class="mt-2">Recent Activity</h4>
                                    </div>
                                    <div class="col text-right mr-2">
                                        <h4 class="mt-2 text-white"><a href="/project/@currentProject.Id/ticket" class="btn btn-secondary"><i class="fas fa-eye"></i> View All Tickets In This Project</a></h4>
                                    </div>
                                </div>
                                <hr class="mt-0" />
                                @if (ticketInProject is not null)
                                {
                                    if (ticketInProject.Count >= 5)
                                    {
                                        var count = 1;
                                        foreach (var ticket in ticketInProject)
                                        {
                                            if (count == 6)
                                            {
                                                break;
                                            }
                                            if (ticket.DeveloperId != null && ticket.OwnnerId != null)
                                            {
                                                byte[] imageData = ticket.Developer.ImageData;
                                                string imageType = ticket.Developer.ContentType;
                                                <div class="post">
                                                    <div class="user-block">
                                                        <img class="img-circle img-bordered-sm" src="@_imageService.DecodeFileAvatar(imageData, imageType)" alt="user image">
                                                        <span class="username">
                                                            <a href="/ticket/details/@ticket.Id">@(ticket.Ownner.FullName) - @_roleService.ReturnUserRole2(ticket.Ownner) - Ticket #@(ticket.Id)</a>
                                                        </span>
                                                        <span class="description">Shared publicly - @ticket.Created.ToString("dd MMMM yyyy - hh:mm tt")</span>
                                                    </div>
                                                    <!-- /.user-block -->
                                                    <a class="text-dark" href="/ticket/details/@ticket.Id">
                                                        @ticket.Description
                                                    </a>

                                                    <div class="row mt-2">
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-comment-dots"></i> @ticket.Comments.Count Comments </a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"> <i class="fas fa-file"></i> @((_context.Attachment.Where(a => a.TicketId == ticket.Id).ToList()).Count) Files Attached </a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-user-edit"></i> @((_context.TicketHistory.Where(a => a.TicketId == ticket.Id).ToList()).Count) Changes </a>
                                                    </div>

                                                </div>
                                            }
                                            else
                                            {
                                                byte[] imageData = null;
                                                string imageType = null;
                                                <div class="post">
                                                    <div class="user-block">
                                                        <img class="img-circle img-bordered-sm" src="@_imageService.DecodeFileAvatar(imageData, imageType)" alt="user image">
                                                        <span class="username">
                                                            @if (ticket.DeveloperId != null && ticket.OwnnerId != null)
                                                            {
                                                                <a href="/ticket/details/@ticket.Id">Un-Assigned Ticket - Create By @_roleService.ReturnUserRole2(ticket.Ownner) - @(ticket.Ownner.FullName) - Ticket #@(ticket.Id)</a>
                                                            }
                                                            else
                                                            {
                                                                <a href="/ticket/details/@ticket.Id">Un-Assigned Ticket - Create By Unknow - Unknow - Ticket #@(ticket.Id)</a>
                                                            }
                                                        </span>
                                                        <span class="description">Shared publicly - @ticket.Created.ToString("dd MMMM yyyy - hh:mm tt")</span>
                                                    </div>
                                                    <!-- /.user-block -->
                                                    <a class="text-dark">
                                                        @ticket.Description
                                                    </a>

                                                    <div class="row mt-2">
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-comment-dots"></i> @ticket.Comments.Count Comments </a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"> <i class="fas fa-file"></i> @((ticket.Attachments.Where(a => a.TicketId == ticket.Id).ToList()).Count) Files Attached </a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-user-edit"></i> @((ticket.TicketHistories.Where(a => a.TicketId == ticket.Id).ToList()).Count) Changes </a>
                                                    </div>

                                                </div>
                                            }



                                            count++;
                                        }
                                    }
                                    else
                                    {
                                        foreach (var ticket in ticketInProject)
                                        {
                                            @if (ticket.DeveloperId != null && ticket.OwnnerId != null)
                                            {
                                                byte[] imageData = ticket.Developer.ImageData;
                                                string imageType = ticket.Developer.ContentType;
                                                <div class="post">
                                                    <div class="user-block">
                                                        <img class="img-circle img-bordered-sm" src="@_imageService.DecodeFileAvatar(imageData, imageType)" alt="user image">
                                                        <span class="username">
                                                            @if (ticket.DeveloperId != null && ticket.OwnnerId != null)
                                                            {
                                                                <a href="/ticket/details/@ticket.Id">@(ticket.Ownner.FullName) - Create By @(_roleService.ReturnUserRole2(ticket.Ownner)) - Ticket #@(ticket.Id)</a>
                                                            }
                                                            else
                                                            {
                                                                <a href="/ticket/details/@ticket.Id">Unknow - Create By Unknow - Ticket #@(ticket.Id)</a>
                                                            }

                                                        </span>
                                                        <span class="description">Shared publicly - @ticket.Created</span>
                                                    </div>
                                                    <!-- /.user-block -->
                                                    <p>
                                                        @ticket.Description
                                                    </p>

                                                    <div class="row">
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-comment-dots"></i> @ticket.Comments.Count Comments </a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm"> <i class="fas fa-file"></i> @ticket.Comments.Count Files</a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-user-edit"></i> @((ticket.TicketHistories.Where(a => a.TicketId == ticket.Id).ToList()).Count) Changes </a>

                                                    </div>

                                                </div>
                                            }
                                            else
                                            {
                                                byte[] imageData = null;
                                                string imageType = null;
                                                <div class="post">
                                                    <div class="user-block">
                                                        <img class="img-circle img-bordered-sm" src="@_imageService.DecodeFileAvatar(imageData, imageType)" alt="user image">
                                                        <span class="username">
                                                            @if (ticket.DeveloperId != null && ticket.OwnnerId != null)
                                                            {
                                                                <a href="/ticket/details/@ticket.Id">@(ticket.Ownner.FullName) - @_roleService.ReturnUserRole2(ticket.Ownner) - Ticket #@(ticket.Id)</a> }
                                                            else
                                                            {
                                                                <a href="/ticket/details/@ticket.Id">Unknow - Ticket #@(ticket.Id)</a>
                                                            }

                                                        </span>
                                                        <span class="description">Shared publicly - @ticket.Created</span>
                                                    </div>
                                                    <!-- /.user-block -->
                                                    <p>
                                                        @ticket.Description
                                                    </p>

                                                    <div class="row">
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-comment-dots"></i> @ticket.Comments.Count Comments </a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm"> <i class="fas fa-file"></i> @ticket.Comments.Count Files</a>
                                                        <a href="/ticket/details/@ticket.Id" class="link-black text-sm mr-2"><i class="fas fa-user-edit"></i> @((ticket.TicketHistories.Where(a => a.TicketId == ticket.Id).ToList()).Count) Changes </a>
                                                    </div>

                                                </div>
                                            }




                                        }
                                    }

                                }

                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-12 col-lg-4 order-1 order-md-2">
                        <img src="@(_imageService.DecodeFile(currentProject.ImageData,currentProject.ContentType))" style="width:100%" />
                        <h3 class="text-primary"><i class="fas fa-paint-brush"></i> @currentProject.Name</h3>
                        <p class="text-muted">@currentProject.Description</p>
                        <br>
                        <div class="text-muted">
                            <div class="row">
                                <div class="col">
                                    <p class="text-sm">
                                        Client Company
                                        <b class="d-block">@currentProject.Company.Name</b>
                                    </p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <p class="text-sm">
                                        Project Leader

                                        @if (projectManager is not null)
                                        {
                                            <b class="d-block">@(projectManager.FullName)</b>
                                        }
                                    </p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <p class="text-sm">
                                        Developer
                                        @if (developerOnProject.Count != 0)
                                        {
                                            foreach (var developer in developerOnProject)
                                            {
                                                <b class="d-block">@(developer.FullName)</b>
                                            }
                                        }

                                    </p>
                                </div>
                                <div class="col">
                                    <p class="text-sm">
                                        Submitter
                                        @if (submitterOnProject.Count != 0)
                                        {
                                            foreach (var submitter in submitterOnProject)
                                            {
                                                <b class="d-block">@(submitter.FullName)</b>
                                            }
                                        }

                                    </p>
                                </div>
                            </div>


                        </div>

                        <h5 class="mt-5 text-muted">Project files</h5>

                        <div class="row">
                            <EditForm Model="NewProjectAttachment" OnValidSubmit="UploadFileProjectAttachment">
                                <div class="media-body ml-3">
                                    <div class="row">
                                        <div class="col-4">
                                            <label>
                                                Description

                                            </label>
                                            <input @bind="NewProjectAttachment.Description" class="form-control" />
                                        </div>
                                        <div class="col">
                                            <br />
                                            <InputFile OnChange="@LoadFilesNew" />
                                        </div>
                                        <div class="col">
                                            <br />
                                            <button type="submit" class="btn btn-sm btn-primary">Upload</button>
                                        </div>
                                    </div>
                                </div>

                            </EditForm>
                        </div>
                        <br />
                        <div class="row clearfix">
                            @if (currentProject.Attachments is not null)
                            {
                                @foreach (var item in currentProject.Attachments)
                                {
                                    var file = item;
                                    <div class="col-2">
                                        <div class="card">
                                            <div class="file" style="cursor:pointer" @onclick="() => OpenViewAttachmentDialog(file)">
                                                <div class="hover">
                                                    <button @onclick="() => DeleteFileAttachment(file)" class="btn btn-icon btn-danger"><i class="fa fa-trash"></i> </button>

                                                </div>
                                                <div class="icon">
                                                    <img src="@_customFileService.GetFileIcon(item.FileName)" style="height:60px;width:60px" />
                                                </div>
                                                <div class="file-name">
                                                    <p class="m-b-5 text-muted">@System.IO.Path.GetFileNameWithoutExtension(item.FileName)</p>
                                                    <small>Size: @_customFileService.FormatFileSize(item.FileData.Length) <span class="date text-muted">@item.Created.ToString("MMM dd, yyyy")</span></small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }

                        </div>
                    </div>
                </div>
            </div>
            <!-- /.card-body -->
        </div>
        <!-- /.card -->

    </section>
}
<ModalDialog @ref="_ProjectAttachmentDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Width="_editModalWidth"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>View Attachment #@CurrentProjectAttachment.FileName</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col text-center">

                    <div class="row mt-2">
                        <div class="col">
                            <embed src="@_imageService.DecodeFile(CurrentProjectAttachment.FileData, CurrentProjectAttachment.ContentType)" style="width:100%; height:700px;" />
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col">
                            <a class="btn btn-block btn-outline-success" href="@(_customFileService.ConvertByteArrayToFile(CurrentProjectAttachment.FileData,CurrentProjectAttachment.FileName))" download="@(CurrentProjectAttachment.FileName)">
                                <i class="fas fa-file-download"></i> Download File
                            </a>
                        </div>
                    </div>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CanceliewAttachmentDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_createDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create New Ticket</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newItem" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Name</label>
                            <input class="form-control" @bind="newItem.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <input class="form-control" @bind="newItem.Description" />
                        </div>

                        <div class="form-group">
                            <label class="control-label">Project</label>
                            <input class="form-control" readonly @bind="newItem.Project.Name" />
                        </div>
                        @if (IsInRoleAdmin || IsProjectManager)
                        {


                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Developer</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newItem.DeveloperId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@developerOnProject TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Owner</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newItem.OwnnerId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@OwnerList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Status</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.StatusId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Status..." Data=@TicketStatusList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">

                                    <div class="form-group">
                                        <label class="control-label">Is Assigned?</label>

                                        <RadzenSelectBar Style="width:100%;" @bind-Value="newItem.IsAssigned" TValue="bool">
                                            <Items>
                                                <RadzenSelectBarItem Text="On" Value="true" />
                                                <RadzenSelectBarItem Text="Off" Value="false" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </div>
                                <div class="col">

                                    <div class="form-group">
                                        <label class="control-label">TicketType</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>


                        }



                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-success btn-block">Create</button>
                            </div>
                        </div>
                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelCreateDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>



<ModalDialog @ref="_editDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit Project #@currentProject.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentProject" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col">
                                <img class="img-fluid" src="@_imageService.DecodeFile(currentProject.ImageData, currentProject.ContentType)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Project Name</label>
                            <input @bind="currentProject.Name" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <textarea @bind="currentProject.Description" class="form-control" rows="4" required></textarea>
                        </div>

                        <div class="form-group">
                            <label class="control-label">Upload Image</label>
                            <InputFile OnChange="@LoadFilesEdit" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Company</label>
                            <input @bind="currentProject.Company.Name" class="form-control" readonly />
                        </div>

                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-primary btn-block">Accept Changes</button>
                            </div>
                        </div>
                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


@code {
    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 500;
    private double _modalMinWitdth = 100;
    private double _editModalWidth;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;


    private ModalDialog _ProjectAttachmentDialog;
    private ModalDialog _createDialog;
    private ModalDialog _editDialog;

    [Parameter]
    public string ProjectId { get; set; }
    public Models.CustomUser user = new();
    public Models.CustomUser projectManager = new();
    public Models.Project currentProject = new();
    public List<Models.Ticket> ticketInProject = new();
    public List<Models.CustomUser> developerOnProject = new();
    public List<Models.CustomUser> submitterOnProject = new();
    public Models.ProjectAttachment NewProjectAttachment = new();
    public Models.ProjectAttachment CurrentProjectAttachment = new();
    public List<Models.TicketType> TicketTypeList = new();
    public List<Models.Priority> TicketPriorityList = new();
    public List<Models.Status> TicketStatusList = new();
    public List<Models.Project> ProjectList = new();
    public List<Models.CustomUser> OwnerList = new();

    public int CloseId;
    public bool IsInRoleAdmin;
    public bool IsDeveloper;
    public bool IsSubmitter;
    public bool IsProjectManager;
    public bool IsNewUser;
    public DateTime currentTime;

    public Models.Ticket newItem = new();

    private async Task OpenCreateDialog()
    {
        newItem = new();
        newItem.Project = currentProject;
        newItem.ProjectId = currentProject.Id;
        await _createDialog.Open();
    }
    private async Task CancelCreateDialog()
    {
        await _createDialog.Close();
    }
    private async Task OpenEditProjectDialog()
    {
        await _editDialog.Open();
    }
    private async Task CancelEditDialog()
    {
        await _editDialog.Close();
    }
    private async Task LoadFilesEdit(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        currentProject.ImageData = buffers.ToArray();
        currentProject.ContentType = imgFile.ContentType;

    }
    public async Task Edit()
    {
        try
        {
            _context.Update(currentProject);
            _context.SaveChanges();
            GetData();
            await CancelEditDialog();

            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
    }
    public async Task OpenViewAttachmentDialog(Models.ProjectAttachment file)
    {
        CurrentProjectAttachment = file;
        await _ProjectAttachmentDialog.Open();
    }
    public async Task CanceliewAttachmentDialog()
    {
        CurrentProjectAttachment = new();
        await _ProjectAttachmentDialog.Close();
    }
    public async Task Add()
    {
        try
        {
            newItem.OwnnerId = user.Id;
            newItem.Created = DateTime.Now;
            newItem.Updated = newItem.Created;
            if (IsDeveloper || IsSubmitter)
            {
                newItem.TicketTypeId = _context.TicketType.FirstOrDefault(t => t.Name == "UnAssign").Id;
                newItem.PriorityId = _context.Priority.FirstOrDefault(t => t.Name == "UnAssign").Id;
                newItem.StatusId = _context.Status.FirstOrDefault(t => t.Name == "UnAssign").Id;
            }

            _context.Add(newItem);
            _context.SaveChanges();


            var currentClosedStatusId = _context.Status.FirstOrDefault(t => t.Name == "Closed").Id;
            var projectName = _context.Project.FirstOrDefault(p => p.Id == newItem.ProjectId).Name;
            if (newItem.IsAssigned == true && newItem.StatusId != currentClosedStatusId)
            {
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket Assign",
                    TicketId = newItem.Id,
                    Description = "You have a new ticket.",
                    Created = DateTime.Now,
                    SenderId = newItem.OwnnerId,
                    RecipientId = newItem.DeveloperId
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();


                string devEmail = (_context.Users.FirstOrDefault(u => u.Id == newItem.DeveloperId)).Email;
                string subject = "New Ticket Assignment";
                string message = $"You have been Assigned a new ticket {newItem.Name} about {newItem.Description} for project: {projectName}";

                await _emailSender.SendEmailAsync(devEmail, subject, message);

            }
            //access project name


            //create notifocation for project manager on project through system notification and email
            //notification when current user is submitter
            if (IsSubmitter)
            {
                //notification for project manager on project
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket is Created by Submitter",
                    TicketId = newItem.Id,
                    Description = $"New Ticket #{newItem.Id} is Created by Submitter in {projectName} and Waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = newItem.OwnnerId,
                    RecipientId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();

                //email to project manager about the notification
                string PMEmail = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Email;
                string subject = "New Ticket Has Been Created by Submitter";
                string message = $"A new ticket {newItem.Name} has been created by Submitter {user.FullName} about {newItem.Description} for project: {projectName}, and waiting approval from you.";

                await _emailSender.SendEmailAsync(PMEmail, subject, message);

                //notification to current user
                Models.Notification notification2 = new Models.Notification
                {
                    Name = "You just Create a New Ticket",
                    TicketId = newItem.Id,
                    Description = $"You just create a new ticket #{newItem.Id} in project {projectName} and waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id,
                    RecipientId = newItem.OwnnerId
                };
                _context.Notification.Add(notification2);
                _context.SaveChanges();

            }
            //create notifocation for project manager on project through system notification and email
            //notification when current user is developer
            else if (IsDeveloper)
            {
                //send notication to project manager on project
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket is Created by Developer",
                    TicketId = newItem.Id,
                    Description = $"New Ticket #{newItem.Id} is Created by Developer in {projectName} and Waiting for being Approve",
                    Created = DateTime.Now,
                    SenderId = newItem.OwnnerId,
                    RecipientId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();


                string PMEmail = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Email;
                string subject = "New Ticket Has Been Created by Developer";
                string message = $"A new ticket {newItem.Name} has been created by Developer {user.FullName} about {newItem.Description} for project: {projectName}, and waiting approval from you.";

                await _emailSender.SendEmailAsync(PMEmail, subject, message);

                Models.Notification notification2 = new Models.Notification
                {
                    Name = "You just Create a New Ticket",
                    TicketId = newItem.Id,
                    Description = $"You just create a new ticket #{newItem.Id} in project {projectName} and waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id,
                    RecipientId = newItem.OwnnerId
                };
                _context.Notification.Add(notification2);
                _context.SaveChanges();
            }




            CancelCreateDialog();
            GetData();
            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
    }

    protected override void OnInitialized()
    {

        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = _context.Users.FirstOrDefault(u => u.Email == currrentUser.Identity.Name);
        IsInRoleAdmin = currrentUser.IsInRole(Roles.Admin.ToString());
        IsDeveloper = currrentUser.IsInRole(Roles.Developer.ToString());
        IsNewUser = currrentUser.IsInRole(Roles.NewUser.ToString());
        IsSubmitter = currrentUser.IsInRole(Roles.Submitter.ToString());
        IsProjectManager = currrentUser.IsInRole(Roles.ProjectManager.ToString());
        var developerOnProject = _projectService.DeveloperOnProject(Convert.ToInt32(ProjectId));
        if (IsInRoleAdmin || IsProjectManager || developerOnProject.Contains(user))
        {
            GetData();
        }
        else
        {
            NavigationManager.NavigateTo("/accessdenied");
        }
    }

    public void DeleteFileAttachment(Models.ProjectAttachment file)
    {
        _context.Remove(file);
        _context.SaveChanges();
    }

    public void GetData()
    {
        currentProject = _context.Project
            .Include(p => p.Attachments)
            .Include(p => p.Company)
            .Include(p => p.CustomUsers)
            .Include(p => p.Tickets)
            .FirstOrDefault(p => p.Id == Convert.ToInt32(ProjectId));
        ticketInProject = _context.Ticket
            .Include(t => t.Attachments)
            .Include(t => t.Comments)
            .Include(t => t.Developer)
            .Include(t => t.Ownner)
            .Include(t => t.Priority)
            .Include(t => t.Project)
            .Include(t => t.Status)
            .Include(t => t.TicketHistories)
            .Include(t => t.TicketType)
            .Where(t => t.ProjectId == currentProject.Id).ToList();
        CloseId = _context.Status.FirstOrDefault(s => s.Name == "Closed").Id;


        currentTime = DateTime.Now;
        projectManager = _projectService.ProjectManagerOnProject(currentProject.Id);
        if (projectManager is null)
        {
            projectManager = null;
        }
        developerOnProject = (_projectService.DeveloperOnProject(currentProject.Id)).ToList();

        submitterOnProject = (_projectService.SubmitterOnProject(currentProject.Id)).ToList();


        TicketTypeList = _context.TicketType.ToList();
        TicketPriorityList = _context.Priority.ToList();
        TicketStatusList = _context.Status.ToList();
        OwnerList = _context.Users.ToList();


    }

    public async Task UploadFileProjectAttachment()
    {
        try
        {
            if (NewProjectAttachment.FileData == null || NewProjectAttachment.ContentType == null)
            {
                await JSRuntime.InvokeVoidAsync("errorProjectUpload", null);
            }
            else
            {
                NewProjectAttachment.ProjectId = currentProject.Id;
                NewProjectAttachment.CustomUserId = user.Id;
                NewProjectAttachment.Created = DateTime.Now;

                _context.Add(NewProjectAttachment);
                _context.SaveChanges();

                currentProject = _context.Project
                   .Include(p => p.Attachments)
                   .Include(p => p.Company)
                   .Include(p => p.CustomUsers)
                   .Include(p => p.Tickets)
                   .FirstOrDefault(p => p.Id == Convert.ToInt32(ProjectId));
                NewProjectAttachment = new();

                await JSRuntime.InvokeVoidAsync("success", null);
            }

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }


    }
    private async Task LoadFilesNew(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        NewProjectAttachment.FileData = buffers.ToArray();
        NewProjectAttachment.ContentType = imgFile.ContentType;
        NewProjectAttachment.FileName = imgFile.Name;


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //user = await sessionStorage.GetItemAsync<CustomUser>("user");
        //IsInRoleAdmin = await sessionStorage.GetItemAsync<bool>("IsInRoleAdmin");
        //IsDeveloper = await sessionStorage.GetItemAsync<bool>("IsDeveloper");
        //IsNewUser = await sessionStorage.GetItemAsync<bool>("IsNewUser");
        //IsSubmitter = await sessionStorage.GetItemAsync<bool>("IsSubmitter");
        //IsProjectManager = await sessionStorage.GetItemAsync<bool>("IsProjectManager");

        _editModalWidth = await JSRuntime.InvokeAsync<int>("ScreenWidth", null);
        _editModalWidth = _editModalWidth * 0.7;

    }

}
