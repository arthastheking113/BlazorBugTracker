@page "/HR"
@using BlazorBugTracker.Data
@using Microsoft.AspNetCore.Http
@using BlazorBugTracker.Services
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ICustomProjectService _projectService
@inject AuthenticationStateProvider AuthenticationStateProvider
<LoadingPage OnLoading="@GetData">
    <LoadingContent>
        <div class="loader">Loading...</div>
    </LoadingContent>
</LoadingPage>
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                            FilterMode="FilterMode.Simple" PageSize="7" AllowPaging="true" AllowSorting="true" Data="@PayCheckRecordList" TItem="Models.PayCheckRecord" ColumnWidth="100%"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Models.PayCheckRecord" Title="View">
                        <Template Context="data">
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="help" Click=@(() => OpenViewDialog(data)) Text="View" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Models.PayCheckRecord" Property="Start" Title="Start" FormatString="{0:d}" />

                    <RadzenDataGridColumn TItem="Models.PayCheckRecord" Property="End" Title="End" FormatString="{0:d}" />
                    <RadzenDataGridColumn TItem="Models.PayCheckRecord" Property="CustomUser" Title="End">
                        <Template Context="data">
                            @data.CustomUser.FullName
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Models.PayCheckRecord" Property="Salary" Title="Salary">
                        <Template Context="data">
                            $@data.Salary
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>


<ModalDialog @ref="_payCheckDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>View Time Sheet </h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <button class="btn btn-outline-primary" @onclick="ApproveTimeSheet">Approve this time sheet</button>
                </div>
                <div class="col text-right">
                    <h3>Week:  @currentPayCheckRecord.Start.ToString("MM/dd/yyyy") - @currentPayCheckRecord.End.ToString("MM/dd/yyyy")</h3>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col">
                    @if (currentPayCheckRecord.CustomUser is not null)
                    {
                        <p>User: @currentPayCheckRecord.CustomUser.FullName - Salary: $@currentPayCheckRecord.UserSalary/Hours</p>
                    }

                </div>
                <div class="col">
                    <p>Hours Worked: @currentPayCheckRecord.NumberHourOfWorked Hours</p>
                </div>
                <div class="col text-right">
                    <p>Total Salary: $@currentPayCheckRecord.Salary</p>
                </div>

            </div>

        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_submitPayCheckDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Approve Pay Check </h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row">
                <div class="col text-center">
                    <h5>Are you sure you want to approve this time sheet?</h5>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col text-center">
                    <button class="btn btn-outline-primary" @onclick="ConfirmSubmitPayCheck">Yes, Approve this time sheet</button>
                    <button class="btn btn-outline-secondary" @onclick="CancelSubmitPayCheckDialog">No, I'm not ready</button>
                </div>
            </div>

        </div>
    </Content>
</ModalDialog>


@code {
    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _editModalWidth;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;

    private ModalDialog _payCheckDialog;
    private ModalDialog _submitPayCheckDialog;



    public List<Models.PayCheckRecord> PayCheckRecordList = new();
    public Models.PayCheckRecord currentPayCheckRecord = new();
    public List<Models.CustomUser> DeveloperUser = new();
    public List<Models.Project> ProjectList = new();
    public Models.CustomUser user = new();
    public bool IsInRoleAdmin;
    public bool IsDeveloper;
    public bool IsSubmitter;
    public bool IsProjectManager;
    public bool IsNewUser;
    public bool IsHR;

    public double totalWeek;
    public AuthenticationState authentication;
    public async Task OpenViewDialog(Models.PayCheckRecord record)
    {
        currentPayCheckRecord = record;


        await _payCheckDialog.Open();
    }

    public async Task CancelPayRollDialog()
    {

        await _payCheckDialog.Close();
        currentPayCheckRecord = new();

    }

    public async Task ApproveTimeSheet()
    {
        await _submitPayCheckDialog.Open();
    }

    public async Task CancelSubmitPayCheckDialog()
    {
        await _submitPayCheckDialog.Close();
    }
    public async Task ConfirmSubmitPayCheck()
    {
        try
        {

            await GetData();
            await CancelSubmitPayCheckDialog();

            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }


    }
    protected override async Task OnInitializedAsync()
    {
        //var currrentUser = _httpContextAccessor.HttpContext.User;
        authentication = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = _context.Users.FirstOrDefault(u => u.Email == authentication.User.Identity.Name);
        IsInRoleAdmin = authentication.User.IsInRole(Roles.Admin.ToString());
        IsDeveloper = authentication.User.IsInRole(Roles.Developer.ToString());
        IsNewUser = authentication.User.IsInRole(Roles.NewUser.ToString());
        IsSubmitter = authentication.User.IsInRole(Roles.Submitter.ToString());
        IsProjectManager = authentication.User.IsInRole(Roles.ProjectManager.ToString());
        IsHR = authentication.User.IsInRole(Roles.HR.ToString());

        if (IsInRoleAdmin || IsHR)
        {
            await GetData();
        }
        else
        {
            NavigationManager.NavigateTo("/accessdenied");
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("enableTable", null);

        }
        _editModalWidth = await JSRuntime.InvokeAsync<int>("ScreenWidth", null);
        _editModalWidth = _editModalWidth * 0.7;
    }

    public async Task GetData()
    {
        await Task.Delay(1);
        DeveloperUser = new();
        if (IsProjectManager)
        {
            ProjectList = _context.Project.Include(p => p.CustomUsers).Where(p => p.CompanyId == user.CompanyId).ToList();
            foreach (var item in ProjectList)
            {
                var checkUser = _projectService.ProjectManagerOnProject(item.Id);
                if (checkUser == user)
                {
                    var DeveloperOnProject = _projectService.DeveloperOnProject(item.Id);
                    var SubmitterOnProject = _projectService.SubmitterOnProject(item.Id);
                    foreach (var developer in DeveloperOnProject)
                    {
                        DeveloperUser.Add(developer);
                    }
                    foreach (var submitter in SubmitterOnProject)
                    {
                        DeveloperUser.Add(submitter);
                    }

                }
            }
        }
        else if (IsInRoleAdmin)
        {
            ProjectList = _context.Project.Include(p => p.CustomUsers).ToList();
            DeveloperUser = _context.Users.ToList();
        }

        DeveloperUser = DeveloperUser.Distinct().ToList();
        foreach (var item in DeveloperUser)
        {
            var PayCheckRecordListCheck = _context.PayCheckRecord.Include(p => p.CustomUser).Where(r => !r.IsApproved && r.IsSubmitted && r.CustomUserId == item.Id).ToList();
            foreach (var item2 in PayCheckRecordListCheck)
            {
                PayCheckRecordList.Add(item2);
            }

        }
    }
}
