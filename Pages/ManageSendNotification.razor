@page "/manage/notification"
@using BlazorBugTracker.Data
@inject ApplicationDbContext _context
@using Microsoft.AspNetCore.Identity.UI.Services
@inject IEmailSender _emailSender
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime  
<LoadingPage OnLoading="@GetData">
    <LoadingContent>
        <div class="loader">Loading...</div>
    </LoadingContent>
</LoadingPage>
<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header bg-dark">
                <h3 class="card-title">Send out notification</h3>
            </div>
            <div class="card-body p-0">
                <br />
                <div class="row">
                    <div class="col">
                        <LoadingButton class="btn btn-outline-success ml-4" Type="ButtonTypes.Button" OnClicked="SendOutTimeSheetNotification">
                            <Content>
                                <i class="fas fa-paper-plane"></i> Send out time sheet Notification to All Users
                            </Content>
                            <LoadingContent>
                                <i class="fa fa-spinner fa-spin"></i> Sending...
                            </LoadingContent>
                        </LoadingButton>
                    </div>
                </div>
                <br />
            </div>
        </div>
    </div>
</div>

@code {
    public List<Models.CustomUser> users = new();
    public Models.CustomUser admin = new();
    public string url;
    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }
    public async Task GetData()
    {
        await Task.Delay(100);
        users = _context.Users.ToList();
        admin = users.FirstOrDefault(c => c.Email == "arthastheking113@gmail.com");
        url = NavigationManager.BaseUri;
    }
    public async Task TestLoading()
    {
        await Task.Delay(1500);
    }

    public async Task SendOutTimeSheetNotification()
    {
        try
        {
            await Task.Delay(100);
            foreach (var item in users)
            {

                Models.WelcomeNotification newNotification = new Models.WelcomeNotification
                {
                    Name = "Remember to submit your timesheet",
                    Description = "Please submit your timesheet to the system. You can submit timesheet in Time Sheet page in the left navigation bar.",
                    RecipientId = item.Id,
                    SenderId = admin.Id,
                    Created = DateTime.Now
                };
                _context.Add(newNotification);
                _emailSender.SendEmailAsync(item.Email, "Remember your timesheet", $"<a target='_blank' href='{url}'><h3>Please login and submit your timesheet to the system.</h3></a> <br> <h4>You can submit timesheet in Time Sheet page in the left navigation bar.</h4>");
            }
            _context.SaveChanges();
            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }

    }
}
