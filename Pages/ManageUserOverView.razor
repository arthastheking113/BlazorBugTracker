@page "/manage/user"
@using BlazorBugTracker.Service
@inject IImageService _imageService
@using BlazorBugTracker.Data
@inject ApplicationDbContext _context
@inject IJSRuntime JSRuntime
@inject IImageService _imageService
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
@inject UserManager<CustomUser> _userManager
@inject ICustomRoleService _roleService
@inject NavigationManager NavigationManager
<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header bg-dark">
                <h3 class="card-title">User Overview</h3>
            </div>
            <div class="card-body p-0">
                <br />
                <div class="row">
                    <div class="col">
                        <a class="btn btn-outline-success ml-4" @onclick="OpenCreateDialog">Create New User</a>
                    </div>
                </div>

                <br />
                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                FilterMode="FilterMode.Simple" PageSize="7" AllowPaging="true" AllowSorting="true" Data="@ItemList" TItem="Models.CustomUser" ColumnWidth="100%"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                LogicalFilterOperator="LogicalFilterOperator.Or">
                    <Columns>
                        <RadzenDataGridColumn TItem="Models.CustomUser" Title="View">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="help" Click=@(() => OpenViewDialog(data)) Text="View" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Models.CustomUser" Width="70px" Filterable="false" Sortable="false"   TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <img class="rounded-circle img-fluid" src="@(_imageService.DecodeFileAvatar(data.ImageData, data.ContentType))" />
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Models.CustomUser" Property="UserId" Title="ID" />
                        <RadzenDataGridColumn TItem="Models.CustomUser" Property="FullName" Title="Name" />

                        <RadzenDataGridColumn TItem="Models.CustomUser" Property="Email" Title="Email" />
                        <RadzenDataGridColumn TItem="Models.CustomUser" Property="Role" Title="Role" />
                        <RadzenDataGridColumn TItem="Models.CustomUser" Property="PhoneNumber" Title="Phone Number" />
                        <RadzenDataGridColumn TItem="Models.CustomUser" Property="Company" Title="Company">
                            <Template Context="data">
                                @if (data.Company is not null)
                                {
                                    @(data.Company.Name)
                                }
                                else
                                {
                                    <p class="mb-0">None</p>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Models.CustomUser" Width="90px">
                            <Template Context="data">
                                <div class="btn-group-vertical">
                                    <a class="btn btn-info text-white btn-sm mb-1" @onclick="() => OpenEditDialog(data)"><i class="fas fa-pencil-alt"></i> Edit</a>

                                    <button type="button" class="btn btn-danger btn-sm mb-1" @onclick="() => OpenDeleteDialog(data)">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>

                                </div>


                            </Template>
                        </RadzenDataGridColumn>

                    </Columns>
                </RadzenDataGrid>
            </div>
        </div>
    </div>
</div>
<ModalDialog @ref="_createDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create New User</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newItem" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        @if (errors is not null)
                        {
                            foreach (var item in errors)
                            {
                                <p class="text-danger">@item</p>
                            }
                        }
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">First Name</div>
                                <input class="form-control" @bind="newItem.FirstName" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Last Name</div>
                                <input class="form-control" @bind="newItem.LastName" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">SSN</div>
                                <input class="form-control" @bind="newItem.SSN" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Email</div>
                                <input class="form-control"  type="email" @bind="newItem.Email" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Phone Number</div>
                                <input class="form-control" @bind="newItem.PhoneNumber" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Day of Birth</div>
                                <RadzenDatePicker @bind-Value=@newItem.DayOfBirth DateFormat="d"  />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Password</div>
                                <input class="form-control" required min="6" max="50" @bind="newItem.NewPassword" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Confirm Password</div>
                                <input class="form-control" required min="6" max="50" @bind="newItem.NewConfirmPassword" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Address</div>
                                <input class="form-control" required @bind="newItem.Address" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">City</div>
                                <input class="form-control" required @bind="newItem.City" />
                            </div>

                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">State</div>
                                <input class="form-control" required @bind="newItem.State" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">ZipCode</div>
                                <input class="form-control" required @bind="newItem.ZipCode" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Monthly Salary</div>
                                <input class="form-control" required @bind="newItem.MonthlySalary" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Company</div>
                                <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.CompanyId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                                Placeholder="Select Company..." Data=@CompanyList TextProperty="Name" ValueProperty="Id" />

                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Role</div>
                                <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newItem.Role" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                                Placeholder="Select Role..." Data=@RoleList TextProperty="Name" ValueProperty="Name" Change=@(args => OnChange(args)) />

                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-success btn-block">Create</button>
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelCreateDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>

<ModalDialog @ref="_editDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit User: @currentItem.FullName - ID: @currentItem.UserId</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentItem" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">First Name</div>
                                <input class="form-control" @bind="currentItem.FirstName" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Last Name</div>
                                <input class="form-control" @bind="currentItem.LastName" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">SSN</div>
                                <input class="form-control" @bind="currentItem.SSN" />
                            </div>

                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Email</div>
                                <input class="form-control" type="email" @bind="currentItem.Email" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Phone Number</div>
                                <input class="form-control" @bind="currentItem.PhoneNumber" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">User ID</div>
                                <input class="form-control" readonly @bind="currentItem.UserId" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Address</div>
                                <input class="form-control" required @bind="currentItem.Address" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">City</div>
                                <input class="form-control" required @bind="currentItem.City" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Day of Birth</div>
                                <RadzenDatePicker @bind-Value=@newItem.DayOfBirth DateFormat="d" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">State</div>
                                <input class="form-control" required @bind="currentItem.State" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">ZipCode</div>
                                <input class="form-control" required @bind="currentItem.ZipCode" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Monthly Salary</div>
                                <input class="form-control" required @bind="currentItem.MonthlySalary" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Company</div>
                                <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.CompanyId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                                Placeholder="Select Company..." Data=@CompanyList TextProperty="Name" ValueProperty="Id" Change=@(args => OnChange(args)) />

                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Role</div>
                                <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentItem.Role" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                                Placeholder="Select Role..." Data=@RoleList TextProperty="Name" ValueProperty="Name" Change=@(args => OnChange(args)) />

                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-primary btn-block">Accept Changes</button>
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_deleteDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Delete User: @currentItem.FullName - ID: @currentItem.UserId</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentItem" OnValidSubmit="Delete">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">First Name</div>
                                <input class="form-control" readonly @bind="currentItem.FirstName" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Last Name</div>
                                <input class="form-control" readonly @bind="currentItem.LastName" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">SSN</div>
                                <input class="form-control" readonly @bind="currentItem.SSN" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Email</div>
                                <input class="form-control" readonly @bind="currentItem.Email" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Phone Number</div>
                                <input class="form-control" readonly @bind="currentItem.PhoneNumber" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">User ID</div>
                                <input class="form-control" readonly @bind="currentItem.UserId" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Address</div>
                                <input class="form-control" readonly @bind="currentItem.Address" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">City</div>
                                <input class="form-control" readonly @bind="currentItem.City" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Day of Birth</div>
                                <input class="form-control" readonly @bind="currentItem.DayOfBirth" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">State</div>
                                <input class="form-control" readonly @bind="currentItem.State" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">ZipCode</div>
                                <input class="form-control" readonly @bind="currentItem.ZipCode" />
                            </div>
                            <div class="col">
                                <div style="margin-top:5%">Monthly Salary</div>
                                <input class="form-control" readonly @bind="currentItem.MonthlySalary" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div style="margin-top:5%">Company</div>
                                @if (currentItem.Company is not null)
                                {
                                    <input class="form-control" readonly @bind="currentItem.Company.Name" />
                                }
                                else
                                {
                                    <p>None</p>
                                }
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-danger btn-block">Delete</button>
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelDeleteDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_viewDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>View User: @currentItem.FullName - ID: @currentItem.UserId</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row">
                <div class="col">
                    <div class="row">
                        <div class="col">
                            <div style="margin-top:5%">First Name</div>
                            <input class="form-control" readonly @bind="currentItem.FirstName" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">Last Name</div>
                            <input class="form-control" readonly @bind="currentItem.LastName" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">SSN</div>
                            <input class="form-control" readonly @bind="currentItem.SSN" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div style="margin-top:5%">Email</div>
                            <input class="form-control" readonly @bind="currentItem.Email" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">Phone Number</div>
                            <input class="form-control" readonly @bind="currentItem.PhoneNumber" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">User ID</div>
                            <input class="form-control" readonly @bind="currentItem.UserId" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div style="margin-top:5%">Address</div>
                            <input class="form-control" readonly @bind="currentItem.Address" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">City</div>
                            <input class="form-control" readonly @bind="currentItem.City" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">Day of Birth</div>
                            <input class="form-control" readonly @bind="currentItem.DayOfBirth" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div style="margin-top:5%">State</div>
                            <input class="form-control" readonly @bind="currentItem.State" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">ZipCode</div>
                            <input class="form-control" readonly @bind="currentItem.ZipCode" />
                        </div>
                        <div class="col">
                            <div style="margin-top:5%">Monthly Salary</div>
                            <input class="form-control" readonly @bind="currentItem.MonthlySalary" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <div style="margin-top:5%">Company</div>
                            @if (currentItem.Company is not null)
                            {
                                <input class="form-control" readonly @bind="currentItem.Company.Name" />
                            }
                            else
                            {
                                <p>None</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <hr />
            <button class="btn btn-secondary btn-block" @onclick="CancelViewDialog">Cancel</button>
        </div>
    </Content>
</ModalDialog>




@code {

    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;

    private ModalDialog _viewDialog;
    private ModalDialog _createDialog;
    private ModalDialog _editDialog;
    private ModalDialog _deleteDialog;
    public Models.CustomUser user = new();
    public bool IsInRoleAdmin;
    public bool IsHR;
    public Models.CustomUser newItem = new();
    public Models.CustomUser currentItem = new();

    public async Task OpenViewDialog(Models.CustomUser user)
    {
        currentItem = user;
        await _viewDialog.Open();
    }
    private async Task CancelViewDialog()
    {
        currentItem = new();
        await _viewDialog.Close();
    }
    private async Task OpenCreateDialog()
    {
        errors = null;
        await _createDialog.Open();
    }
    private async Task CancelCreateDialog()
    {
        errors = null;
        await _createDialog.Close();
    }
    private async Task OpenEditDialog(Models.CustomUser user)
    {
        currentItem = user;
        await _editDialog.Open();
    }
    private async Task CancelEditDialog()
    {
        currentItem = new();
        await _editDialog.Close();
    }
    private async Task OpenDeleteDialog(Models.CustomUser user)
    {
        currentItem = user;
        await _deleteDialog.Open();
    }
    private async Task CancelDeleteDialog()
    {
        currentItem = new();
        await _deleteDialog.Close();
    }

    public async Task Add()
    {
        try
        {
            if (!_roleService.ReturnUserRole3(user).ToLower().Contains("demo"))
            {
                if (String.IsNullOrEmpty(newItem.Role) || String.IsNullOrWhiteSpace(newItem.Role))
                {
                    await JSRuntime.InvokeVoidAsync("errorMissingRole", null);
                }
                else
                {
                    if (newItem.NewPassword != newItem.NewConfirmPassword)
                    {
                        newItem.EmailConfirmed = true;
                        newItem.DateJoined = DateTime.Now;
                        newItem.UserId = CreateUserId();
                        var result = await _userManager.CreateAsync(newItem, newItem.NewPassword);
                        if (result.Succeeded)
                        {

                            await _roleService.AddUserToRoleAsync(newItem, newItem.Role);

                            CancelEditDialog();
                            await GetData();
                            await JSRuntime.InvokeVoidAsync("success", null);
                        }
                        else
                        {
                            errors = result.Errors;
                            await JSRuntime.InvokeVoidAsync("error", null);
                        }

                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("errorPasswordNotMatch", null);
                    }
                }
            }
            else
            {
                NavigationManager.NavigateTo("/demouserwarning");
            }

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
    }
    public async Task Edit()
    {
        try
        {
            if (!String.IsNullOrEmpty(currentItem.Role) || !String.IsNullOrWhiteSpace(currentItem.Role))
            {
                var roles = await _roleService.ListUserRoleAsync(currentItem);
                foreach (var item in roles)
                {
                    await _roleService.RemoveUserFromRoleAsync(currentItem, item);
                }
                await _roleService.AddUserToRoleAsync(currentItem, currentItem.Role);
            }
            await _userManager.UpdateAsync(currentItem);
            await GetData();
            CancelEditDialog();
            await JSRuntime.InvokeVoidAsync("success", null);

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
    }
    public async Task Delete()
    {
        try
        {
            if (!_roleService.ReturnUserRole3(user).ToLower().Contains("demo"))
            {
                await _userManager.DeleteAsync(currentItem);

                await GetData();
                CancelDeleteDialog();
                await JSRuntime.InvokeVoidAsync("success", null);
            }
            else
            {
                NavigationManager.NavigateTo("/demouserwarning");
            }


        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
    }


    public List<Models.CustomUser> ItemList = new();
    public List<Models.Company> CompanyList = new();
    public IEnumerable<IdentityError> errors = null;
    public List<IdentityRole> RoleList = new();
    public List<string> userRoleList = new();

    protected override async Task OnInitializedAsync()
    {
        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = _context.Users.FirstOrDefault(u => u.Email == currrentUser.Identity.Name);
        IsInRoleAdmin = currrentUser.IsInRole(Roles.Admin.ToString());
        IsHR = currrentUser.IsInRole(Roles.HR.ToString());
        if (IsInRoleAdmin || IsHR)
        {

            await GetData();
        }
        else
        {
            NavigationManager.NavigateTo("/accessdenied");
        }
    }

    public async Task GetData()
    {
        try
        {
            ItemList = _context.Users.Include(i => i.Company).ToList();
            foreach (var item in ItemList)
            {
                item.Role = await _roleService.ReturnUserRole(item);
            }
            CompanyList = _context.Company.ToList();
            RoleList = _context.Roles.Where(c => !c.Name.ToLower().Contains("admin")).ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }

    }

    public string CreateUserId()
    {
        Random rand = new Random();
        var RandomNumber = Enumerable.Range(0, 10)
                                     .Select(i => new Tuple<int, int>(rand.Next(10), i))
                                     .OrderBy(i => i.Item1)
                                     .Select(i => i.Item2);
        var UserId = String.Join("", string.Join(";", RandomNumber).Split('@', ',', '.', ';', '\''));


        while (_context.Users.Where(i => i.UserId == UserId).ToList().Count > 0)
        {
            RandomNumber = Enumerable.Range(0, 10)
                                     .Select(i => new Tuple<int, int>(rand.Next(10), i))
                                     .OrderBy(i => i.Item1)
                                     .Select(i => i.Item2);
            UserId = String.Join("", string.Join(";", RandomNumber).Split('@', ',', '.', ';', '\''));
        }
        return UserId;
    }


    void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("enableTable", null);
        }
    }
}
