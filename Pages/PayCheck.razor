@page "/timesheet"
@using BlazorBugTracker.Data
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext _context
@inject IHttpContextAccessor _httpContextAccessor
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
<LoadingPage OnLoading="@GetData">
    <LoadingContent>
        <div class="loader">Loading...</div>
    </LoadingContent>
</LoadingPage>
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                            FilterMode="FilterMode.Simple" PageSize="7" AllowPaging="true" AllowSorting="true" Data="@ListOfTwoWeeks" TItem="Models.TwoWeeksModel" ColumnWidth="100%"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="Models.TwoWeeksModel" Title="View">
                        <Template Context="data">

                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="help" Click=@(() => OpenCreateDialog(data)) Text="View" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Models.TwoWeeksModel" Property="Start" Title="Start" FormatString="{0:d}" />

                    <RadzenDataGridColumn TItem="Models.TwoWeeksModel" Property="End" Title="End" FormatString="{0:d}" />

                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>





<ModalDialog @ref="_payCheckDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>View Time Sheet </h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row">
                <div class="col text-left">
                    <button class="btn btn-outline-primary" @onclick="SubmitTimeSheet">Submit Time Sheet</button>
                </div>
                <div class="col text-right">
                    Is Submitted?
                    <RadzenSelectBar Disabled="true" @bind-Value=@currentPayRollIsSubmitted TValue="bool">
                        <Items>
                            <RadzenSelectBarItem Text="Yes" Value="true" />
                            <RadzenSelectBarItem Text="No" Value="false" />
                        </Items>
                    </RadzenSelectBar>
                </div>
                <div class="col text-right">
                    Is Approved?
                    <RadzenSelectBar Disabled="true" @bind-Value=@currentPayRollIsApproved TValue="bool">
                        <Items>
                            <RadzenSelectBarItem Text="Yes" Value="true" />
                            <RadzenSelectBarItem Text="No" Value="false" />
                        </Items>
                    </RadzenSelectBar>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col">
                    <h3>Week:  @currentTwoWeek.Start.ToString("MM/dd/yyyy") - @currentTwoWeek.End.ToString("MM/dd/yyyy")</h3>
                </div>
            </div>
            <div class="row mt-2 pb-2">
                <div class="col">
                    <div class="table-wrapper-scroll-y my-custom-scrollbar">
                        <table class="table table-condensed">
                            <thead>

                                <tr>
                                    <th>Date</th>
                                    <th>In</th>
                                    <th>Out</th>
                                    <th>Type</th>
                                    <th>Note</th>
                                    <th>Total</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in currentItemList)
                                {

                                    <tr>
                                        <td>
                                            <input class="form-control" readonly value="@item.Start.ToString("dddd, dd MMMM yyyy")" />
                                        </td>
                                        <td>
                                            <input class="form-control" type="time" @bind="item.Start" @bind:event="oninput" @onchange="reload" />
                                        </td>
                                        <td>
                                            <input class="form-control" type="time" @bind="item.End" @bind:event="oninput" @onchange="reload" />
                                        </td>
                                        <td>
                                            <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="item.Name" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                                            Placeholder="Select Type..." Data=@DropDownName TextProperty="SelectName" ValueProperty="SelectName" />

                                        </td>
                                        <td>
                                            <input class="form-control" type="text" @bind="item.Note" />
                                        </td>
                                        <td>
                                            @if (item.Start.DayOfWeek == DayOfWeek.Sunday || item.Start.DayOfWeek == DayOfWeek.Saturday)
                                            {
                                                <p>@((item.End - item.Start).Hours) Hours</p>
                                            }
                                            else
                                            {
                                                <p>@((item.End.AddHours(-1) - item.Start).Hours) Hours</p>
                                            }

                                        </td>
                                        <td>
                                            @if (_isButtonLoading)
                                            {
                                                <button type="button" disabled class="btn btn-outline-primary">
                                                    <i class="fa fa-spinner fa-spin"></i> Loading...
                                                </button>
                                            }
                                            else
                                            {
                                                <button type="button" @onclick="() => Save(item)" class="btn btn-outline-primary">
                                                    <span class="iconify" data-icon="entypo:save"></span> Save
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }

                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td>
                                        <h4>Total</h4>
                                    </td>
                                    <td>
                                    </td>
                                    <td>
                                    </td>
                                    <td>
                                        <h4>@totalWeek hours</h4>
                                    </td>
                                    <td></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelPayRollDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_submitPayCheckDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Submit Pay Check </h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row">
                <div class="col text-center">
                    <h5>Are you sure you want to submit this time sheet?</h5>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col text-center">
                    @if (_isButtonLoading)
                    {
                        <button type="button" disabled class="btn btn-outline-primary">
                            <i class="fa fa-spinner fa-spin"></i> Loading...
                        </button>
                    }
                    else
                    {
                        <button type="button" @onclick="ConfirmSubmitPayCheck" class="btn btn-outline-primary">
                            <span class="iconify" data-icon="entypo:save"></span> Yes, submit this time sheet
                        </button>
                    }
                    <button class="btn btn-outline-secondary" @onclick="CancelSubmitPayCheckDialog">No, I'm not ready</button>
                </div>
            </div>

        </div>
    </Content>
</ModalDialog>


@code {
    private bool _isButtonLoading = false;

    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _editModalWidth;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;



    RadzenScheduler<Models.PayRoll> payRoll;
    public List<Models.PayRoll> ItemList = new();
    public List<Models.PayRoll> currentItemList = new();

    public List<Models.TwoWeeksModel> ListOfTwoWeeks = new();
    public Models.TwoWeeksModel currentTwoWeek = new();
    public Models.PayRoll newItem = new();
    public Models.PayRoll currentItem = new();
    public Models.PayCheckRecord currentPayCheckRecord = new();

    public Models.CustomUser user = new();
    public List<Models.SelectDropDown> DropDownName = new();


    public List<Models.PayRoll> currentPayRoll = new();
    public bool currentPayRollIsSubmitted;
    public bool currentPayRollIsApproved;

    public DateTime currentTime = DateTime.Now;

    public DateTime Begin1Period;
    public DateTime End1Period;
    public IEnumerable<DateTime> DayRange = null;
    public DateTime BeginningOfTime;
    IEnumerable<DateTime> DisableDate = null;

    public double totalWeek;

    private ModalDialog _payCheckDialog;
    private ModalDialog _submitPayCheckDialog;
    public AuthenticationState authentication;

    public async Task CancelSubmitPayCheckDialog()
    {
        await _submitPayCheckDialog.Close();
    }
    public async Task SubmitTimeSheet()
    {
        await _submitPayCheckDialog.Open();
    }
    public async Task ConfirmSubmitPayCheck()
    {
        try
        {
            _isButtonLoading = true;
            List<int> numberList = new List<int>();
            float numberOfWork = 0;
            foreach (var item in currentItemList)
            {
                if (item.Id != 0)
                {
                    numberList.Add(item.Id);
                    numberOfWork += float.Parse(item.TotalHour);
                }

            }
            var salary = user.HourSalary * numberOfWork;
            if (currentPayCheckRecord is null)
            {
                Models.PayCheckRecord newPayCheckRecord = new Models.PayCheckRecord
                {
                    Start = currentItemList.First().Start,
                    End = currentItemList.Last().End,
                    NumberHourOfWorked = numberOfWork,
                    UserSalary = user.HourSalary,
                    CustomUserId = currentItemList.First().CustomUserId,
                    Salary = Convert.ToInt64(salary),
                    IsSubmitted = true,
                    PayRollId = numberList
                };
                _context.Add(newPayCheckRecord);
                _context.SaveChanges();
            }
            else
            {
                currentPayCheckRecord.Start = currentItemList.First().Start;
                currentPayCheckRecord.End = currentItemList.Last().End;
                currentPayCheckRecord.NumberHourOfWorked = numberOfWork;
                currentPayCheckRecord.UserSalary = user.HourSalary;
                currentPayCheckRecord.CustomUserId = currentItemList.First().CustomUserId;
                currentPayCheckRecord.Salary = Convert.ToInt64(salary);
                currentPayCheckRecord.IsSubmitted = true;
                currentPayCheckRecord.PayRollId = numberList;
                _context.Update(currentPayCheckRecord);
                _context.SaveChanges();
            }
            foreach (var item in currentItemList)
            {
                if (item.Id != 0)
                {
                    item.IsSubmitted = true;
                    _context.Update(item);
                }
            }
            _context.SaveChanges();

            await GetData();
            GetTimeSheet();
            await CancelSubmitPayCheckDialog();
            await CancelPayRollDialog();
            await JSRuntime.InvokeVoidAsync("success", null);

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
        finally
        {
            _isButtonLoading = false;
        }

    }
    public void reload()
    {
        totalWeek = 0;
        foreach (var item in currentItemList)
        {
            if (item.Start.DayOfWeek == DayOfWeek.Sunday || item.Start.DayOfWeek == DayOfWeek.Saturday)
            {
                if (item.End.Date == currentTime.Date || item.Start.Date == currentTime.Date)
                {
                    if (item.End.Date == currentTime.Date)
                    {
                        TimeSpan time = new TimeSpan(item.End.Hour, item.End.Minute, 0);
                        item.End = item.Start.Date + time;
                        totalWeek += (item.End - item.Start).TotalHours;
                    }
                    else
                    {
                        TimeSpan time = new TimeSpan(item.Start.Hour, item.Start.Minute, 0);
                        item.Start = item.End.Date + time;
                        totalWeek += (item.End - item.Start).TotalHours;
                    }

                }
                else
                {
                    totalWeek += (item.End - item.Start).TotalHours;
                }

            }
            else
            {
                if (item.End.Date == currentTime.Date || item.Start.Date == currentTime.Date)
                {
                    if (item.End.Date == currentTime.Date)
                    {
                        TimeSpan time = new TimeSpan(item.End.Hour, item.End.Minute, 0);
                        item.End = item.Start.Date + time;
                        totalWeek += (item.End.AddHours(-1) - item.Start).TotalHours;
                    }
                    else
                    {
                        TimeSpan time = new TimeSpan(item.Start.Hour, item.Start.Minute, 0);
                        item.Start = item.End.Date + time;
                        totalWeek += (item.End.AddHours(-1) - item.Start).TotalHours;
                    }

                }
                else
                {
                    totalWeek += (item.End.AddHours(-1) - item.Start).TotalHours;
                }

            }


        }


        StateHasChanged();
    }
    public async Task OpenCreateDialog(Models.TwoWeeksModel twoWeek)
    {
        currentTwoWeek = twoWeek;
        GetTimeSheet();
        await _payCheckDialog.Open();
    }
    public void GetTimeSheet()
    {
        DayRange = EachDay(currentTwoWeek.Start, currentTwoWeek.End);
        currentItemList = new();
        totalWeek = 0;
        List<int> IdList = new List<int>();
        foreach (var item in DayRange)
        {
            if (item.DayOfWeek == DayOfWeek.Sunday || item.DayOfWeek == DayOfWeek.Saturday)
            {
                var checkPayRoll = ItemList.FirstOrDefault(p => p.Start.Date == item.Date);
                if (checkPayRoll is null)
                {
                    Models.PayRoll newPayRoll = new Models.PayRoll
                    {
                        Start = item,
                        End = item,
                        CustomUserId = user.Id
                    };
                    currentItemList.Add(newPayRoll);
                    totalWeek += (newPayRoll.End - newPayRoll.Start).TotalHours;
                }
                else
                {
                    currentItemList.Add(checkPayRoll);
                    totalWeek += (checkPayRoll.End - checkPayRoll.Start).TotalHours;
                    IdList.Add(checkPayRoll.Id);
                }

            }
            else
            {
                var checkPayRoll = ItemList.FirstOrDefault(p => p.Start.Date == item.Date);
                if (checkPayRoll is null)
                {
                    Models.PayRoll newPayRoll = new Models.PayRoll
                    {
                        Start = item.AddHours(8),
                        End = item.AddHours(17),
                        CustomUserId = user.Id
                    };
                    currentItemList.Add(newPayRoll);
                    totalWeek += (newPayRoll.End.AddHours(-1) - newPayRoll.Start).TotalHours;
                }
                else
                {
                    currentItemList.Add(checkPayRoll);
                    totalWeek += (checkPayRoll.End.AddHours(-1) - checkPayRoll.Start).TotalHours;
                    IdList.Add(checkPayRoll.Id);
                }

            }

        }

        currentPayCheckRecord = _context.PayCheckRecord.FirstOrDefault(p => p.PayRollId == IdList);
        if (currentItemList.First().IsSubmitted)
        {
            currentPayRollIsSubmitted = true;
        }
        else
        {
            currentPayRollIsSubmitted = false;
        }
        if (currentItemList.First().IsApproved)
        {
            currentPayRollIsApproved = true;
        }
        else
        {
            currentPayRollIsApproved = false;
        }
        StateHasChanged();
    }

    public async Task Save(Models.PayRoll payroll)
    {
        try
        {
            _isButtonLoading = true;
            if (string.IsNullOrEmpty(payroll.Name))
            {
                await JSRuntime.InvokeVoidAsync("errorTimeSheetNameMissing", null);
            }
            else if (string.IsNullOrEmpty(payroll.Note))
            {
                await JSRuntime.InvokeVoidAsync("errorTimeSheetNoteMissing", null);
            }
            else
            {

                if (payroll.Id != 0)
                {
                    _context.Update(payroll);
                    _context.SaveChanges();
                }
                else
                {
                    payroll.CustomUserId = user.Id;
                    _context.Add(payroll);
                    _context.SaveChanges();
                }
                await GetData();
                GetTimeSheet();

                await JSRuntime.InvokeVoidAsync("success", null);
            }

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
        finally
        {
            _isButtonLoading = false;
        }


    }

    public async Task CancelPayRollDialog()
    {
        currentItemList = new();
        DayRange = null;
        currentPayRollIsApproved = false;
        currentPayRollIsSubmitted = false;
        currentPayCheckRecord = new();
        await _payCheckDialog.Close();
    }


    protected override async Task OnInitializedAsync()
    {
        await GetData();
        GetDropDown();


    }

    public async Task GetData()
    {
        await Task.Delay(1);
        authentication = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = _context.Users.FirstOrDefault(u => u.Email == authentication.User.Identity.Name);
        ItemList = _context.PayRoll.Include(p => p.CustomUser).Where(p => p.CustomUserId == user.Id).OrderByDescending(c => c.Start).ToList();
        DisableDate = Enumerable.Range(0, 1 + user.DateJoined.AddDays(-1).Subtract(BeginningOfTime).Days)
        .Select(offset => BeginningOfTime.AddDays(offset))
        .ToArray();

        var dateBetweenCurrentAndDateJoin = currentTime.Subtract(user.DateJoined).TotalDays;
        var numberOf2Week = dateBetweenCurrentAndDateJoin / 14;
        if (Convert.ToInt32(user.DateJoined.ToString("dd")) <= 15)
        {
            Begin1Period = FirstDayOfMonth(user.DateJoined);
            End1Period = Begin1Period.AddDays(14);
        }
        else
        {
            Begin1Period = LastDayOfMonth(user.DateJoined).AddDays(-14);
            End1Period = LastDayOfMonth(user.DateJoined);
        }
        ListOfTwoWeeks = new();
        Models.TwoWeeksModel newTwoWeek = new Models.TwoWeeksModel
        {
            Start = user.DateJoined,
            End = End1Period
        };
        ListOfTwoWeeks.Add(newTwoWeek);

        if (numberOf2Week > 1)
        {
            var begin = End1Period.AddDays(1);
            var end = begin.AddDays(14);
            for (int i = 0; i < numberOf2Week; i++)
            {
                Models.TwoWeeksModel newTwoWeek2 = new Models.TwoWeeksModel
                {
                    Start = begin,
                    End = end
                };
                ListOfTwoWeeks.Add(newTwoWeek2);
                begin = end.AddDays(1);
                end = begin.AddDays(14);
            }
        }
        else if (End1Period < currentTime)
        {
            var begin = End1Period.AddDays(1);
            var end = begin.AddDays(14);
            Models.TwoWeeksModel newTwoWeek2 = new Models.TwoWeeksModel
            {
                Start = begin,
                End = end
            };
            ListOfTwoWeeks.Add(newTwoWeek2);
        }
        //Models.TwoWeeksModel newTwoWeek3 = new Models.TwoWeeksModel
        //{
        //    Start = ListOfTwoWeeks.Last().End.AddDays(1),
        //    End = ListOfTwoWeeks.Last().End.AddDays(15)
        //};
        //ListOfTwoWeeks.Add(newTwoWeek3);

    }

    public void GetDropDown()
    {
        DropDownName = new();
        var dropdown = "New Ticket,New Development,Current Ticket,Fix Error,Meeting,Holiday,Recovery,Meeting,Other";
        foreach (var item in dropdown.Split(",").ToList())
        {
            Models.SelectDropDown newDropDown = new Models.SelectDropDown
            {
                SelectName = item,
                SelectValue = item
            };
            DropDownName.Add(newDropDown);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("enableTable", null);

        }
        _editModalWidth = await JSRuntime.InvokeAsync<int>("ScreenWidth", null);
        _editModalWidth = _editModalWidth * 0.7;
    }

    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = DisableDate.Contains(args.Date);
    }

    public DateTime FirstDayOfMonth(DateTime value)
    {
        return new DateTime(value.Year, value.Month, 1);
    }

    public int DaysInMonth(DateTime value)
    {
        return DateTime.DaysInMonth(value.Year, value.Month);
    }

    public DateTime LastDayOfMonth(DateTime value)
    {
        return new DateTime(value.Year, value.Month, DaysInMonth(value));
    }
    public IEnumerable<DateTime> EachDay(DateTime from, DateTime thru)
    {
        for (var day = from.Date; day.Date <= thru.Date; day = day.AddDays(1))
            yield return day;
    }
}
