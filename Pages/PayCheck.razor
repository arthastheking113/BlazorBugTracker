@page "/timesheet"
@using BlazorBugTracker.Data
@using Microsoft.AspNetCore.Http
@inject ApplicationDbContext _context
@inject IHttpContextAccessor _httpContextAccessor
@inject IJSRuntime JSRuntime
<div class="container-fluid">
    <div class="row">
        <div class="col">
            <RadzenScheduler @ref=@payRoll style="height: 600px;" TItem="Models.PayRoll" Data=@ItemList StartProperty="Start" EndProperty="End"
                             TextProperty="Summary" SelectedIndex="2"
                             SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect >
                <RadzenDayView />
                <RadzenWeekView />
                <RadzenMonthView />
            </RadzenScheduler>
        </div>
    </div>
    <div class="row ">
        <div class="col">
            @if (user.DateJoined < Begin4Period)
            {
                <div class="row">
                    <div class="col">
                        @Begin4Period.ToString("MM/dd/yyyy") - @End4Period.ToString("MM/dd/yyyy")
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        @Begin3Period.ToString("MM/dd/yyyy") - @End3Period.ToString("MM/dd/yyyy")
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        @Begin2Period.ToString("MM/dd/yyyy") - @End2Period.ToString("MM/dd/yyyy")
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        @Begin1Period.ToString("MM/dd/yyyy") - @End1Period.ToString("MM/dd/yyyy") (Next Week)
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col">
                        <p class="mb-0">You Joined The Company From: @user.DateJoined.ToString("MM/dd/yyyy") </p>
                        <p class="mb-0">You only can fill timesheet after @user.DateJoined.ToString("MM/dd/yyyy") </p>
                    </div>
                </div>
                @if (user.DateJoined > Begin4Period && user.DateJoined < End4Period)
                {
                    <div class="row">
                        <div class="col">
                            @user.DateJoined.ToString("MM/dd/yyyy") - @End4Period.ToString("MM/dd/yyyy")
                        </div>
                    </div>
                }
                @if (user.DateJoined > Begin3Period && user.DateJoined < End3Period)
                {
                    <div class="row">
                        <div class="col">
                            @user.DateJoined.ToString("MM/dd/yyyy") - @End3Period.ToString("MM/dd/yyyy")
                        </div>
                    </div>
                }

                @if (user.DateJoined > Begin2Period && user.DateJoined < End2Period)
                {
                    <div class="row">
                        <div class="col">
                            @user.DateJoined.ToString("MM/dd/yyyy") - @End2Period.ToString("MM/dd/yyyy")
                        </div>
                    </div>
                }



                <div class="row">
                    <div class="col">
                        @Begin1Period.ToString("MM/dd/yyyy") - @End1Period.ToString("MM/dd/yyyy") (Next Week)
                    </div>
                </div>
            }

        </div>
    </div>
</div>



<ModalDialog @ref="_createDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create New Time Sheet</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newItem" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Name</label>
                            <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newItem.Name"  FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                            Placeholder="Select Name..." Data=@DropDownName TextProperty="SelectName" ValueProperty="SelectName"  />

                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label>Start</label>
                                    <RadzenDatePicker Style="width:100%"  DateRender=@DateRender TValue="DateTime" @bind-Value="newItem.Start" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>End</label>
                                    <RadzenDatePicker Style="width:100%"  DateRender=@DateRender TValue="DateTime" @bind-Value="newItem.End" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Note</label>
                            <RadzenHtmlEditor @bind-Value=@newItem.Note style="height: 300px; margin-bottom: 1rem;" UploadUrl="upload/image" >
                                <RadzenHtmlEditorUndo />
                                <RadzenHtmlEditorRedo />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorBold />
                                <RadzenHtmlEditorItalic />
                                <RadzenHtmlEditorUnderline />
                                <RadzenHtmlEditorStrikeThrough />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorColor />
                                <RadzenHtmlEditorBackground />
                                <RadzenHtmlEditorRemoveFormat />
                            </RadzenHtmlEditor>
                        </div>
                        <input type="submit" value="Create new Project" class="btn btn-outline-success btn-block">


                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelCreateDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_editDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit Time Sheet #@currentItem.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentItem" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label>Name</label>
                            <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentItem.Name" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%"
                                            Placeholder="Select Name..." Data=@DropDownName TextProperty="SelectName" ValueProperty="SelectName" />

                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label>Start</label>
                                    <RadzenDatePicker Disabled="true"  Style="width:100%" TValue="DateTime" @bind-Value="currentItem.Start" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label>End</label>
                                    <RadzenDatePicker Disabled="true" Style="width:100%" TValue="DateTime" @bind-Value="currentItem.End" ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Note</label>
                            <RadzenHtmlEditor @bind-Value=@currentItem.Note style="height: 300px; margin-bottom: 1rem;" UploadUrl="upload/image">
                                <RadzenHtmlEditorUndo />
                                <RadzenHtmlEditorRedo />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorBold />
                                <RadzenHtmlEditorItalic />
                                <RadzenHtmlEditorUnderline />
                                <RadzenHtmlEditorStrikeThrough />
                                <RadzenHtmlEditorSeparator />
                                <RadzenHtmlEditorColor />
                                <RadzenHtmlEditorBackground />
                                <RadzenHtmlEditorRemoveFormat />
                            </RadzenHtmlEditor>
                        </div>
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-primary btn-block">Accept Changes</button>
                            </div>
                        </div>
                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


@code {
    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _editModalWidth;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;



    RadzenScheduler<Models.PayRoll> payRoll;
    public List<Models.PayRoll> ItemList = new();
    public Models.PayRoll newItem = new();
    public Models.PayRoll currentItem = new();
    public Models.CustomUser user = new();
    public List<Models.SelectDropDown> DropDownName = new();
    public DateTime currentTime = DateTime.Now;

    public DateTime Begin1Period;
    public DateTime End1Period;
    public DateTime Begin2Period;
    public DateTime End2Period;
    public DateTime Begin3Period;
    public DateTime End3Period;
    public DateTime Begin4Period;
    public DateTime End4Period;
    public DateTime BeginningOfTime;
    IEnumerable<DateTime> DisableDate = null;


    private ModalDialog _createDialog;
    private ModalDialog _editDialog;
    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (user.DateJoined.Date <= args.Start.Date)
        {
            newItem = new();
            newItem.Start = args.Start.AddHours(8);
            newItem.End = args.Start.AddHours(17);
            await _createDialog.Open();

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("errorNotTime", null);
        }

    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Models.PayRoll> args)
    {
        currentItem = args.Data;
        await _editDialog.Open();
    }

    private async Task CancelCreateDialog()
    {
        newItem = new();

        await _createDialog.Close();
        await payRoll.Reload();
    }
    private async Task OpenEditDialog(int id)
    {
        currentItem = ItemList.FirstOrDefault(i => i.Id == id);
        await _editDialog.Open();
    }
    private async Task CancelEditDialog()
    {
        currentItem = new();

        await _editDialog.Close();
        await payRoll.Reload();
    }

    public async Task Add()
    {
        if (user.DateJoined > newItem.Start || user.DateJoined > newItem.End)
        {
            await JSRuntime.InvokeVoidAsync("errorInvalidTimeSheet", null);
        }
        else
        {

        }
    }
    public void Edit()
    {

    }
    protected override void OnInitialized()
    {
        GetData();
        GetDropDown();
        var currentDate = Convert.ToInt32(currentTime.ToString("dd"));


        if (currentDate <= 15)
        {
            Begin2Period = FirstDayOfMonth(currentTime);
            End2Period = Begin1Period.AddDays(14);

            Begin1Period = End2Period.AddDays(1);
            End1Period = LastDayOfMonth(currentTime);

            var nextDateOfNextMonth = Begin2Period.AddDays(-2);

            Begin4Period = FirstDayOfMonth(nextDateOfNextMonth);
            End4Period = Begin4Period.AddDays(14);

            End3Period = LastDayOfMonth(nextDateOfNextMonth);
            Begin3Period = End4Period.AddDays(1);
        }
        else
        {
            Begin1Period = FirstDayOfMonth(LastDayOfMonth(currentTime).AddDays(2));
            End1Period = Begin1Period.AddDays(14);

            Begin2Period = FirstDayOfMonth(currentTime).AddDays(14);
            End2Period = LastDayOfMonth(currentTime);


            Begin3Period = FirstDayOfMonth(currentTime);
            End3Period = Begin3Period.AddDays(14);

            Begin4Period = FirstDayOfMonth(Begin3Period.AddDays(-2)).AddDays(14);
            End4Period = LastDayOfMonth(Begin4Period);
        }

        DisableDate = Enumerable.Range(0, 1 + user.DateJoined.AddDays(-1).Subtract(BeginningOfTime).Days)
          .Select(offset => BeginningOfTime.AddDays(offset))
          .ToArray();

    }
    void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = DisableDate.Contains(args.Date);
    }
    public void GetData()
    {
        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = _context.Users.FirstOrDefault(u => u.Email == currrentUser.Identity.Name);
        ItemList = _context.PayRoll.Where(p => p.CustomUserId == user.Id).ToList();
    }

    public void GetDropDown()
    {
        DropDownName = new();
        var dropdown = "New Ticket,New Development,Current Ticket,Fix Error,Meeting,Holiday";
        foreach (var item in dropdown.Split(",").ToList())
        {
            Models.SelectDropDown newDropDown = new Models.SelectDropDown
            {
                SelectName = item,
                SelectValue = item
            };
            DropDownName.Add(newDropDown);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("enableTable", null);

        }
        _editModalWidth = await JSRuntime.InvokeAsync<int>("ScreenWidth", null);
        _editModalWidth = _editModalWidth * 0.3;
    }
    public DateTime FirstDayOfMonth(DateTime value)
    {
        return new DateTime(value.Year, value.Month, 1);
    }

    public int DaysInMonth(DateTime value)
    {
        return DateTime.DaysInMonth(value.Year, value.Month);
    }

    public  DateTime LastDayOfMonth(DateTime value)
    {
        return new DateTime(value.Year, value.Month, DaysInMonth(value));
    }
}
