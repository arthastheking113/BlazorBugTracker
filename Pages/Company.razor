@page "/company"
@inject IJSRuntime JSRuntime
@using BlazorBugTracker.Services
@using Microsoft.AspNetCore.Identity
@using BlazorBugTracker.Data
@inject ApplicationDbContext _context
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@inject ICustomRoleService _roleService
@inject ICustomProjectService _projectService
@inject IHttpContextAccessor _httpContextAccessor
@inject UserManager<CustomUser> _userManager
@inject NavigationManager NavigationManager
<section class="content">
    <div class="card">
        <div class="card-header bg-dark">
            Company
        </div>
        <br />
        <div class="row">

            <div class="col">
                <!-- Default box -->
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">All Company</h3>
  
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col">
                                <button type="button" class="btn btn-outline-success" @onclick="OpenCreateDialog">
                                    <i class="fas fa-plus-square"></i> Create New Company
                                </button>

                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col">
                                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                                FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@ItemList" TItem="Models.Company" ColumnWidth="100%"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                LogicalFilterOperator="LogicalFilterOperator.Or">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Models.Company" Title="Id" Width="50px">
                                            <Template Context="data">
                                                <p>
                                                    #@data.Id
                                                </p>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Company" Width="200px" Property="Name" Title="Name" />

                                        <RadzenDataGridColumn TItem="Models.Company" Property="Description" Title="Description" />

                                        <RadzenDataGridColumn TItem="Models.Company" Width="90px">
                                            <Template Context="data">
                                                <div class="btn-group-vertical">
                                                    <a class="btn btn-info text-white btn-sm mb-1" @onclick="() => OpenEditDialog(data.Id)"><i class="fas fa-pencil-alt"></i> Edit</a>

                                                    <button type="button" class="btn btn-danger btn-sm mb-1" @onclick="() => OpenDeleteDialog(data.Id)">
                                                        <i class="fas fa-trash"></i> Delete
                                                    </button>

                                                </div>


                                            </Template>
                                        </RadzenDataGridColumn>

                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                        </div>

                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
        </div>
    </div>
</section>
<!-- /.content -->


<ModalDialog @ref="_createDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create New Company</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newItem" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label class="control-label">Project Name</label>
                            <input @bind="newItem.Name" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <textarea @bind="newItem.Description" class="form-control" rows="4" required></textarea>
                        </div>



                        <input type="submit" value="Create new Project" class="btn btn-outline-success btn-block">


                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelCreateDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_editDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit Company #@currentItem.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentItem" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label class="control-label">Project Name</label>
                            <input @bind="currentItem.Name" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <textarea @bind="currentItem.Description" class="form-control" rows="4" required></textarea>
                        </div>



                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-primary btn-block">Accept Changes</button>
                            </div>
                        </div>
                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_deleteDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Delete Company #@currentItem.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentItem" OnValidSubmit="Delete">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label class="control-label">Project Name</label>
                            <input readonly @bind="currentItem.Name" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <textarea readonly @bind="currentItem.Description" class="form-control" rows="4" required></textarea>
                        </div>
                      
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-danger btn-block">Delete</button>
                            </div>
                        </div>
                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelDeleteDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>




@code {


    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _editModalWidth;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;

    private ModalDialog _createDialog;
    private ModalDialog _editDialog;
    private ModalDialog _deleteDialog;

    public Models.Company newItem = new();
    public Models.Company currentItem = new();

    public List<Models.Company> ItemList = new();
    public Models.CustomUser user = new();
    public bool IsInRoleAdmin;
    public bool IsDeveloper;
    public bool IsSubmitter;
    public bool IsProjectManager;
    public bool IsNewUser;
    protected override async Task OnInitializedAsync()
    {
        var currrentUser = _httpContextAccessor.HttpContext.User;
        if (currrentUser.Identity.IsAuthenticated)
        {
            user = _context.Users.FirstOrDefault(u => u.Email == currrentUser.Identity.Name);
            IsInRoleAdmin = currrentUser.IsInRole(Roles.Admin.ToString());
            IsDeveloper = currrentUser.IsInRole(Roles.Developer.ToString());
            IsNewUser = currrentUser.IsInRole(Roles.NewUser.ToString());
            IsSubmitter = currrentUser.IsInRole(Roles.Submitter.ToString());
            IsProjectManager = currrentUser.IsInRole(Roles.ProjectManager.ToString());
            if (!IsInRoleAdmin)
            {
                NavigationManager.NavigateTo("/accessdenied");
            }
            else
            {
                GetData();
            }

        }

    }

    private async Task OpenCreateDialog()
    {
        newItem = new();
        await _createDialog.Open();
    }
    private async Task CancelCreateDialog()
    {
        newItem = new();
        await _createDialog.Close();
    }
    private async Task OpenEditDialog(int id)
    {
        currentItem = ItemList.FirstOrDefault(i => i.Id == id);
        await _editDialog.Open();
    }
    private async Task CancelEditDialog()
    {
        currentItem = new();
        await _editDialog.Close();
    }
    private async Task OpenDeleteDialog(int id)
    {
        currentItem = ItemList.FirstOrDefault(i => i.Id == id);

        await _deleteDialog.Open();
    }
    private async Task CancelDeleteDialog()
    {
        currentItem = new();
        await _deleteDialog.Close();
    }

    public async Task Add()
    {
        try
        {
            _context.Add(newItem);
            _context.SaveChanges();

            await GetData();
            await CancelCreateDialog();

            await JSRuntime.InvokeVoidAsync("success", null);

        }
        catch(Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
    }
    public async Task Edit()
    {
        try
        {
            _context.Update(currentItem);
            _context.SaveChanges();

            await GetData();
            await CancelEditDialog();

            await JSRuntime.InvokeVoidAsync("success", null);

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
    }
    public async Task Delete()
    {
        try
        {
            var projectList = _context.Project.Include(p => p.Attachments).Where(p => p.CompanyId == currentItem.Id).ToList();
            // delete project of company
            foreach (var project in projectList)
            {
                var ticketList = _context.Ticket.Include(t => t.Attachments).Include(t => t.Comments).Include(t => t.TicketHistories).Where(t => t.ProjectId == project.Id).ToList();
                //delete ticket of this project
                foreach (var ticket in ticketList)
                {
                    //delete all attachments in 1 ticket
                    foreach (var attachment in ticket.Attachments)
                    {
                        _context.Attachment.Remove(attachment);
                        _context.SaveChanges();
                    }
                    //delete all comment in 1 ticket
                    foreach (var comment in ticket.Comments)
                    {
                        _context.Comment.Remove(comment);
                        _context.SaveChanges();
                    }
                    //delete all History in 1 ticket
                    foreach (var history in ticket.TicketHistories)
                    {
                        _context.TicketHistory.Remove(history);
                        _context.SaveChanges();
                    }
                    _context.Ticket.Remove(ticket);
                    _context.SaveChanges();
                }
                //you don't need to do this foreach loop
                foreach (var projectAttachment in project.Attachments)
                {
                    _context.ProjectAttachment.Remove(projectAttachment);
                    _context.SaveChanges();
                }

                _context.Project.Remove(project);
                _context.SaveChanges();
            }

            var listUser = _context.Users.Where(u => u.CompanyId == currentItem.Id).ToList();
            var temporaryCompanyId = _context.Company.FirstOrDefault(c => c.Name == "Temporary Company").Id;
            foreach (var user in listUser)
            {
                user.CompanyId = temporaryCompanyId;
                _context.Users.Update(user);
                _context.SaveChanges();
            }
            //delete company
            _context.Company.Remove(currentItem);
            _context.SaveChanges();
            await GetData();
            await CancelDeleteDialog();

            await JSRuntime.InvokeVoidAsync("success", null);

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
    }

    public void  GetData()
    {
        ItemList = _context.Company.ToList();


    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("enableTable", null);
            _editModalWidth = await JSRuntime.InvokeAsync<int>("ScreenWidth", null);
            _editModalWidth = _editModalWidth * 0.5;
        }
    }
}
