@page "/project/{ProjectId}/ticket"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@using BlazorBugTracker.Services
@using Microsoft.AspNetCore.Identity.UI.Services
@inject IEmailSender _emailSender
@inject ICustomRoleService _roleService
@inject ICustomProjectService _projectService
@inject IHttpContextAccessor _httpContextAccessor
@inject UserManager<CustomUser> _userManager
@using BlazorBugTracker.Data
@inject ApplicationDbContext _context
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage
@inject ICustomHistoryService _customHistoryService
@inject NavigationManager NavigationManager
@if (ItemList.Count == 0)
{
    <div id="preloader">
        <div class="center">
            <p style="text-align: center;font-size: 14px; font-weight: 800; letter-spacing: 1px; text-transform: uppercase; border-radius: 0; font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;">
                Just A Second, I'm Loading...
            </p>
        </div>
    </div>
}
else
{
    <LoadingPage OnLoading="@GetData">
        <LoadingContent>
            <div class="loader">Loading...</div>
        </LoadingContent>
    </LoadingPage>
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header bg-dark">
                    <h3 class="card-title">All Tickets</h3>


                </div>

                <div class="card-body">
                    @if (!IsNewUser)
                    {
                        <div class="row">
                            <div class="col">
                                <a href="/ticket" class="btn btn-outline-dark mr-1">
                                    <span class="iconify" data-icon="ion:arrow-back-circle-sharp" data-inline="true"></span> Back To All Ticket
                                </a>
                                <a href="/project/details/@ProjectId" class="btn btn-outline-primary ml-1 mr-1">
                                    <span class="iconify" data-icon="ion:arrow-back-circle-sharp" data-inline="true"></span> Back To Project
                                </a>
                                <button @onclick="OpenCreateDialog" type="button" class="btn btn-outline-success ml-1">
                                    <i class="fas fa-plus-square"></i> Create New Ticket
                                </button>

                            </div>
                        </div>
                        <br />


                    }
                    <div class="row">
                        <div class="col">
                            @if (ItemList is not null)
                            {
                                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                                FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@ItemList" TItem="Models.Ticket" ColumnWidth="100%"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                LogicalFilterOperator="LogicalFilterOperator.Or">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Title="Id" Width="50px">
                                            <Template Context="data">
                                                <p class="mb-0">
                                                    #@data.Id
                                                </p>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="Name" Title="Name" />

                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="Description" Title="Description" />
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="Created" Title="Created">
                                            <Template Context="data">
                                                <p class="mb-0">
                                                    @data.Created.ToString("dd MMMM yyyy - hh:mm tt")
                                                </p>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="Updated" Title="Updated">
                                            <Template Context="data">
                                                <p class="mb-0">
                                                    @data.Updated.ToString("dd MMMM yyyy - hh:mm tt")
                                                </p>
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="Developer" Title="Developer">
                                            <Template Context="data">
                                                @if (data.Developer is not null)
                                                {
                                                    <p class="mb-0">@data.Developer.FullName</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="Ownner" Title="Ownner">
                                            <Template Context="data">
                                                @if (data.Ownner is not null)
                                                {
                                                    <p class="mb-0">@data.Ownner.FullName</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="Project" Title="Project">
                                            <Template Context="data">
                                                @if (data.Project is not null)
                                                {
                                                    <p class="mb-0">@data.Project.Name</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="IsAssigned" Width="70px" Title="Assign?">
                                            <Template Context="data">
                                                @if (data.IsAssigned)
                                                {
                                                    <p class="mb-0">Y</p>
                                                }
                                                else
                                                {
                                                    <p class="mb-0">N</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Width="100px" Property="Status" Title="Status">
                                            <Template Context="data">
                                                @if (data.Status is not null)
                                                {
                                                    <p class="mb-0">@data.Status.Name</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Width="100px" Property="Priority" Title="Priority">
                                            <Template Context="data">
                                                @if (data.Priority is not null)
                                                {
                                                    <p class="mb-0">@data.Priority.Name</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Property="TicketType" Title="Type">
                                            <Template Context="data">
                                                @if (data.TicketType is not null)
                                                {
                                                    <p class="mb-0">@data.TicketType.Name</p>
                                                }
                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Ticket" Width="90px">
                                            <Template Context="data">
                                                <div class="btn-group-vertical">
                                                    <a class="btn btn-primary btn-sm mb-1" href="/ticket/details/@data.Id"><i class="fas fa-folder"></i> View</a>
                                                    <a class="btn btn-info text-white btn-sm mb-1" @onclick="() => OpenEditDialog(data.Id)"><i class="fas fa-pencil-alt"></i> Edit</a>
                                                    @if (IsInRoleAdmin || IsProjectManager)
                                                    {
                                                        <button type="button" class="btn btn-danger btn-sm mb-1" @onclick="() => OpenDeleteDialog(data.Id)">
                                                            <i class="fas fa-trash"></i> Delete
                                                        </button>
                                                    }
                                                </div>


                                            </Template>
                                        </RadzenDataGridColumn>

                                    </Columns>
                                </RadzenDataGrid>

                            }


                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

}


<ModalDialog @ref="_createDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create New Ticket</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newItem" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Name</label>
                            <input class="form-control" readonly @bind="newItem.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <input class="form-control" readonly @bind="newItem.Description" />
                        </div>

                        <div class="form-group">
                            <label class="control-label">Project</label>
                            <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                            Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                        </div>
                        @if (IsInRoleAdmin || IsProjectManager)
                        {


                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Developer</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newItem.DeveloperId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@DeveloperList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Owner</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newItem.OwnnerId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@OwnerList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Status</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.StatusId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Status..." Data=@TicketStatusList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Is Assigned?</label>

                                        <RadzenSelectBar @bind-Value="newItem.IsAssigned" TValue="bool">
                                            <Items>
                                                <RadzenSelectBarItem Text="On" Value="true" />
                                                <RadzenSelectBarItem Text="Off" Value="false" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </div>
                                <div class="col">

                                    <div class="form-group">
                                        <label class="control-label">TicketType</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newItem.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>


                        }



                        <br />
                        <div class="row">
                            <div class="col">
                                @if (_isButtonLoading)
                                {
                                    <button type="button" disabled class="btn btn-outline-success btn-block">
                                        <i class="fa fa-spinner fa-spin"></i> Loading...
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-outline-success btn-block">
                                        <span class="iconify" data-icon="fluent:add-square-24-filled"></span> Create new Ticket
                                    </button>
                                }

                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelCreateDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>

<ModalDialog @ref="_editDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit Ticket #@currentItem.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentItem" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Name</label>
                            <input class="form-control" @bind="currentItem.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <input class="form-control" @bind="currentItem.Description" />
                        </div>

                        @if (IsInRoleAdmin || IsProjectManager)
                        {
                            <div class="form-group">
                                <label class="control-label">Project</label>
                                <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Is Assigned ?</label>

                                        <RadzenSelectBar Style="width:100%;" @bind-Value="currentItem.IsAssigned" TValue="bool">
                                            <Items>
                                                <RadzenSelectBarItem Text="On" Value="true" />
                                                <RadzenSelectBarItem Text="Off" Value="false" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">TicketType</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Developer</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentItem.DeveloperId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@DeveloperList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Owner</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentItem.OwnnerId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Owner..." Data=@OwnerList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Status</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.StatusId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Status..." Data=@TicketStatusList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>







                        }
                        else if (IsSubmitter)
                        {
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Is Assigned ?</label>

                                        <RadzenSelectBar @bind-Value="currentItem.IsAssigned" TValue="bool">
                                            <Items>
                                                <RadzenSelectBarItem Text="On" Value="true" />
                                                <RadzenSelectBarItem Text="Off" Value="false" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">TicketType</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Ticket Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Developer</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentItem.DeveloperId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@DeveloperList TextProperty="FullName" ValueProperty="Id" />

                                    </div>

                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Project</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>

                            </div>





                        }
                        else
                        {
                            <div class="form-group">
                                <label class="control-label">Project</label>
                                <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                            </div>
                            <div class="form-group">
                                <label class="control-label">Is Assigned?</label>

                                <RadzenSelectBar @bind-Value="currentItem.IsAssigned" TValue="bool">
                                    <Items>
                                        <RadzenSelectBarItem Text="On" Value="true" />
                                        <RadzenSelectBarItem Text="Off" Value="false" />
                                    </Items>
                                </RadzenSelectBar>


                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Ticket Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>

                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Ticket Type</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentItem.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>



                        }

                        <br />
                        <div class="row">
                            <div class="col">
                                @if (_isButtonLoading)
                                {
                                    <button type="button" disabled class="btn btn-primary btn-block">
                                        <i class="fa fa-spinner fa-spin"></i> Loading...
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-primary btn-block">
                                        <span class="iconify" data-icon="dashicons:yes-alt"></span> Accept Changes
                                    </button>
                                }
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_deleteDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Delete Ticket #@currentItem.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentItem" OnValidSubmit="Delete">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Name</label>
                            <input class="form-control" readonly @bind="currentItem.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <input class="form-control" readonly @bind="currentItem.Description" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Project</label>
                            <input class="form-control" readonly @bind="currentItem.Project.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Is Assigned?</label>

                            <RadzenSelectBar Disabled="true" @bind-Value="currentItem.IsAssigned" TValue="bool">
                                <Items>
                                    <RadzenSelectBarItem Text="On" Value="true" />
                                    <RadzenSelectBarItem Text="Off" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Developer</label>
                                    <input class="form-control" readonly value="@currentItem.Developer.FullName" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Owner</label>
                                    <input class="form-control" readonly value="@currentItem.Ownner.FullName" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Ticket Status</label>
                                    <input class="form-control" readonly @bind="currentItem.Status.Name" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Ticket Priority</label>
                                    <input class="form-control" readonly @bind="currentItem.Priority.Name" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Ticket Type</label>
                            <input class="form-control" readonly @bind="currentItem.TicketType.Name" />
                        </div>

                        <div class="row">
                            <div class="col">
                                @if (_isButtonLoading)
                                {
                                    <button type="button" disabled class="btn btn-danger btn-block">
                                        <i class="fa fa-spinner fa-spin"></i> Loading...
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-danger btn-block">
                                        <span class="iconify" data-icon="fluent:delete-28-filled"></span> Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelDeleteDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>





@code {
    private bool _isButtonLoading = false;

    [Parameter]
    public string ProjectId { get; set; }
    public Models.CustomUser user = new();
    public bool IsInRoleAdmin;
    public bool IsDeveloper;
    public bool IsSubmitter;
    public bool IsProjectManager;
    public bool IsNewUser;
    public List<Models.Ticket> ItemList = new();
    public List<Models.TicketType> TicketTypeList = new();
    public List<Models.Priority> TicketPriorityList = new();
    public List<Models.Status> TicketStatusList = new();
    public List<Models.Project> ProjectList = new();
    public List<Models.CustomUser> DeveloperList = new();
    public List<Models.CustomUser> OwnerList = new();

    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;


    private ModalDialog _createDialog;
    private ModalDialog _editDialog;
    private ModalDialog _deleteDialog;

    public Models.Ticket newItem = new();
    public Models.Ticket currentItem = new();

    private async Task OpenCreateDialog()
    {

        await _createDialog.Open();
    }
    private async Task CancelCreateDialog()
    {

        await _createDialog.Close();
    }
    private async Task OpenEditDialog(int id)
    {
        currentItem = ItemList.FirstOrDefault(i => i.Id == id);
        DeveloperList = _projectService.DeveloperOnProject(id).ToList();
        await _editDialog.Open();
    }
    private async Task CancelEditDialog()
    {
        currentItem = new();
        DeveloperList = new();
        await _editDialog.Close();
    }
    private async Task OpenDeleteDialog(int id)
    {
        currentItem = ItemList.FirstOrDefault(i => i.Id == id);

        await _deleteDialog.Open();
    }
    private async Task CancelDeleteDialog()
    {
        currentItem = new();
        await _deleteDialog.Close();
    }

    public async Task Add()
    {
        try
        {
            _isButtonLoading = true;
            newItem.OwnnerId = user.Id;
            newItem.Created = DateTime.Now;
            newItem.Updated = newItem.Created;
            if (IsDeveloper || IsSubmitter)
            {
                newItem.TicketTypeId = _context.TicketType.FirstOrDefault(t => t.Name == "UnAssign").Id;
                newItem.PriorityId = _context.Priority.FirstOrDefault(t => t.Name == "UnAssign").Id;
                newItem.StatusId = _context.Status.FirstOrDefault(t => t.Name == "UnAssign").Id;
            }

            _context.Add(newItem);
            _context.SaveChanges();


            var currentClosedStatusId = _context.Status.FirstOrDefault(t => t.Name == "Closed").Id;
            var projectName = _context.Project.FirstOrDefault(p => p.Id == newItem.ProjectId).Name;
            if (newItem.IsAssigned == true && newItem.StatusId != currentClosedStatusId)
            {
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket Assign",
                    TicketId = newItem.Id,
                    Description = "You have a new ticket.",
                    Created = DateTime.Now,
                    SenderId = newItem.OwnnerId,
                    RecipientId = newItem.DeveloperId
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();


                string devEmail = (_context.Users.FirstOrDefault(u => u.Id == newItem.DeveloperId)).Email;
                string subject = "New Ticket Assignment";
                string message = $"You have been Assigned a new ticket {newItem.Name} about {newItem.Description} for project: {projectName}";

                await _emailSender.SendEmailAsync(devEmail, subject, message);

            }
            //access project name


            //create notifocation for project manager on project through system notification and email
            //notification when current user is submitter
            if (IsSubmitter)
            {
                //notification for project manager on project
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket is Created by Submitter",
                    TicketId = newItem.Id,
                    Description = $"New Ticket #{newItem.Id} is Created by Submitter in {projectName} and Waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = newItem.OwnnerId,
                    RecipientId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();

                //email to project manager about the notification
                string PMEmail = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Email;
                string subject = "New Ticket Has Been Created by Submitter";
                string message = $"A new ticket {newItem.Name} has been created by Submitter {user.FullName} about {newItem.Description} for project: {projectName}, and waiting approval from you.";

                await _emailSender.SendEmailAsync(PMEmail, subject, message);

                //notification to current user
                Models.Notification notification2 = new Models.Notification
                {
                    Name = "You just Create a New Ticket",
                    TicketId = newItem.Id,
                    Description = $"You just create a new ticket #{newItem.Id} in project {projectName} and waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id,
                    RecipientId = newItem.OwnnerId
                };
                _context.Notification.Add(notification2);
                _context.SaveChanges();

            }
            //create notifocation for project manager on project through system notification and email
            //notification when current user is developer
            else if (IsDeveloper)
            {
                //send notication to project manager on project
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket is Created by Developer",
                    TicketId = newItem.Id,
                    Description = $"New Ticket #{newItem.Id} is Created by Developer in {projectName} and Waiting for being Approve",
                    Created = DateTime.Now,
                    SenderId = newItem.OwnnerId,
                    RecipientId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();


                string PMEmail = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Email;
                string subject = "New Ticket Has Been Created by Developer";
                string message = $"A new ticket {newItem.Name} has been created by Developer {user.FullName} about {newItem.Description} for project: {projectName}, and waiting approval from you.";

                await _emailSender.SendEmailAsync(PMEmail, subject, message);

                Models.Notification notification2 = new Models.Notification
                {
                    Name = "You just Create a New Ticket",
                    TicketId = newItem.Id,
                    Description = $"You just create a new ticket #{newItem.Id} in project {projectName} and waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = (_projectService.ProjectManagerOnProject(newItem.ProjectId)).Id,
                    RecipientId = newItem.OwnnerId
                };
                _context.Notification.Add(notification2);
                _context.SaveChanges();
            }




            CancelCreateDialog();
            await GetData();
            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
        finally
        {
            _isButtonLoading = false;
        }
    }
    public async Task Edit()
    {
        try
        {
            _isButtonLoading = true;
            var ticketId = currentItem.Id;
            Models.Ticket oldTicket = await _context.Ticket
                .Include(t => t.TicketType)
                .Include(t => t.Status)
                .Include(t => t.Priority)
                .Include(t => t.Developer)
                .AsNoTracking().FirstOrDefaultAsync(t => t.Id == ticketId);
            currentItem.Updated = DateTime.Now;
            _context.Update(currentItem);
            _context.SaveChanges();

            var userId = user.Id;
            Models.Ticket newTicket = await _context.Ticket
                .Include(t => t.TicketType)
                .Include(t => t.Status)
                .Include(t => t.Priority)
                .Include(t => t.Developer)
                .AsNoTracking().FirstOrDefaultAsync(t => t.Id == ticketId);
            await _customHistoryService.AddHistoryAsync(oldTicket, newTicket, userId);


            await GetData();
            CancelEditDialog();
            await JSRuntime.InvokeVoidAsync("success", null);

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
        finally
        {
            _isButtonLoading = false;
        }
    }
    public async Task Delete()
    {
        try
        {
            _isButtonLoading = true;
            if (!_roleService.ReturnUserRole3(user).ToLower().Contains("demo"))
            {
                var ticketId = currentItem.Id;
                Models.Ticket Ticket = await _context.Ticket
                    .Include(t => t.TicketType)
                    .Include(t => t.Status)
                    .Include(t => t.Priority)
                    .Include(t => t.Developer)
                    .Include(t => t.Attachments)
                    .Include(t => t.Comments)
                    .Include(t => t.Ownner)
                    .Include(t => t.TicketHistories)
                    .ThenInclude(t => t.CustomUser)
                    .AsNoTracking().FirstOrDefaultAsync(t => t.Id == ticketId);


                //delete all attachments in 1 ticket
                foreach (var attachment in Ticket.Attachments)
                {
                    _context.Attachment.Remove(attachment);
                    await _context.SaveChangesAsync();
                }
                //delete all comment in 1 ticket
                foreach (var comment in Ticket.Comments)
                {
                    _context.Comment.Remove(comment);
                    await _context.SaveChangesAsync();
                }
                //delete all History in 1 ticket
                foreach (var history in Ticket.TicketHistories)
                {
                    _context.TicketHistory.Remove(history);
                    await _context.SaveChangesAsync();
                }
                _context.Ticket.Remove(Ticket);
                await _context.SaveChangesAsync();


                await GetData();
                CancelDeleteDialog();
                await JSRuntime.InvokeVoidAsync("success", null);

            }
            else
            {
                NavigationManager.NavigateTo("/demouserwarning");
            }

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
        finally
        {
            _isButtonLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }


    public async Task GetData()
    {
        await Task.Delay(100);
        ItemList = _context.Ticket
            .Include(t => t.Attachments)
            .Include(t => t.Comments)
            .Include(t => t.Developer)
            .Include(t => t.Ownner)
            .Include(t => t.Priority)
            .Include(t => t.Project)
            .Include(t => t.Status)
            .Include(t => t.TicketHistories)
            .Include(t => t.TicketType).Where(t => t.ProjectId == Convert.ToInt32(ProjectId)).ToList();

        TicketTypeList = _context.TicketType.ToList();
        TicketPriorityList = _context.Priority.ToList();
        TicketStatusList = _context.Status.ToList();
        OwnerList = _context.Users.ToList();
        ProjectList = _context.Project.ToList();
        DeveloperList = new();
        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = await _userManager.GetUserAsync(currrentUser);
        IsInRoleAdmin = await _roleService.IsUserInRoleAsync(user, Roles.Admin.ToString());
        IsDeveloper = await _roleService.IsUserInRoleAsync(user, Roles.Developer.ToString());
        IsNewUser = await _roleService.IsUserInRoleAsync(user, Roles.NewUser.ToString());
        IsSubmitter = await _roleService.IsUserInRoleAsync(user, Roles.Submitter.ToString());
        IsProjectManager = await _roleService.IsUserInRoleAsync(user, Roles.ProjectManager.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //user = await sessionStorage.GetItemAsync<CustomUser>("user");
        //IsInRoleAdmin = await sessionStorage.GetItemAsync<bool>("IsInRoleAdmin");
        //IsDeveloper = await sessionStorage.GetItemAsync<bool>("IsDeveloper");
        //IsNewUser = await sessionStorage.GetItemAsync<bool>("IsNewUser");
        //IsSubmitter = await sessionStorage.GetItemAsync<bool>("IsSubmitter");
        //IsProjectManager = await sessionStorage.GetItemAsync<bool>("IsProjectManager");
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("enableTable", null);
        }
    }
}
