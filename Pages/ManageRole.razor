@page "/manage/role"

@using BlazorBugTracker.Data
@using BlazorBugTracker.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@inject ApplicationDbContext _context
@inject UserManager<CustomUser> _userManager
@inject ICustomRoleService _roleService
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager

<LoadingPage OnLoading="@GetData">
    <LoadingContent>
        <div class="loader">Loading...</div>
    </LoadingContent>
</LoadingPage>

<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header bg-dark">
                <h3 class="card-title">Manage Role</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <EditForm Model="manageRole" OnValidSubmit="AddUserToRole">

                            <div class="row">
                                <div class="col">
                                    <div class="card card-default">
                                        <div class="card-body" style="padding:0;">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="form-group">
                                                        <label class="form-control bg-dark"> Select Role </label>
                                                        <br />
                                                        <RadzenListBox AllowFiltering="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@RoleSelected Data=@Roles TextProperty="Name" ValueProperty="Id"
                                                                       TValue="string" Placeholder="Select Role..." Style="height:400px;width:100%" />
                                                    </div>
                                                </div>
                                                <!-- /.col -->
                                                <div class="col-md-6 ">
                                                    <div class="form-group">
                                                        <label class="form-control bg-dark"> Select Users </label>
                                                        <br />
                                                        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="UserSelected" TValue="IEnumerable<string>" Multiple="true" Data=@UserList
                                                                       Change=@(args => OnChangeSelectUser(args)) Placeholder="Select Users..." TextProperty="FullName" ValueProperty="Id" Style="height:400px;width:100%" />

                                                    </div>
                                                    <!-- /.form-group -->
                                                </div>
                                                <!-- /.col -->
                                            </div>
                                            <!-- /.row -->
                                        </div>
                                        <!-- /.card-body -->
                                    </div>
                                </div>
                            </div>


                            <div class="row">
                                <div class="col">
                                    @if (_isButtonLoading)
                                    {
                                        <button type="button" disabled class="btn btn-secondary form-control">
                                            <i class="fa fa-spinner fa-spin"></i> Loading...
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-secondary form-control">
                                            <span class="iconify" data-icon="fluent:add-square-24-filled"></span> Add
                                        </button>
                                    }

                                </div>
                            </div>

                        </EditForm>
                    </div>
                    <div class="col-md">

                        <div class="card">
                            <div class="card-header bg-dark">
                                <h3 class="card-title">All Projects</h3>
                                <div class="card-tools">
                                    <div class="input-group input-group-sm">
                                        <input type="text" class="form-control" placeholder="Search Users/Roles" id="searchUserRole">
                                        <div class="input-group-append">
                                            <div class="btn btn-primary">
                                                <i class="fas fa-search"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <table class="table table-striped projects table-hover" id="viewUserRole">
                                    <thead>
                                        <tr>
                                            <th>
                                                User Name
                                            </th>
                                            <th>
                                                Roles
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in UserList)
                                        {
                                            var roles = _roleService.ReturnUserRole3(user).Split(",").ToList();
                                            <tr>
                                                <td>
                                                    @user.FullName
                                                </td>
                                                <td>
                                                    @foreach (var item in roles)
                                                    {
                                                        <div class="row">
                                                            @item
                                                        </div>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <!-- /.card-body -->
                        </div>
                        <!-- /.card -->

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    public List<Models.CustomUser> UserList = new();
    public Models.CustomUser user = new();

    public List<IdentityRole> Roles = new();
    public IEnumerable<string> UserSelected = Enumerable.Empty<string>();
    public bool IsInRoleAdmin;
    public string RoleSelected;
    private bool _isButtonLoading = false;
    public Models.ManageRole manageRole = new();

    protected override async Task OnInitializedAsync()
    {
        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = _context.Users.FirstOrDefault(u => u.Email == currrentUser.Identity.Name);
        IsInRoleAdmin = currrentUser.IsInRole(BlazorBugTracker.Data.Enums.Roles.Admin.ToString());
        if (IsInRoleAdmin)
        {
            await GetData();
        }
        else
        {
            NavigationManager.NavigateTo("/accessdenied");
        }

    }


    public async Task GetData()
    {
        await Task.Delay(100);
        UserList = _context.Users.ToList();
        Roles = _context.Roles.ToList();
    }

    public async Task AddUserToRole()
    {
        try
        {
            _isButtonLoading = true;
            if (!_roleService.ReturnUserRole3(user).ToLower().Contains("demo"))
            {
                foreach (var id in UserSelected)
                {
                    var user = _context.Users.FirstOrDefault(u => u.Id == id);
                    var isUserInRole = _context.UserRoles.FirstOrDefault(r => r.UserId == id && r.RoleId == RoleSelected);
                    if (isUserInRole is null)
                    {
                        var userRole = _roleService.ReturnUserRole3(user).Split(",").ToList();
                        foreach (var roles in userRole)
                        {
                            await _roleService.RemoveUserFromRoleAsync(user, roles);
                        }
                        await _roleService.AddUserToRoleAsync(user, RoleSelected);
                    }
                }
                UserSelected = Enumerable.Empty<string>();
                RoleSelected = null;
                await JSRuntime.InvokeVoidAsync("success", null);
            }
            else
            {
                NavigationManager.NavigateTo("/demouserwarning");
            }


        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
        finally
        {
            _isButtonLoading = false;
        }

    }

    public void OnChangeSelectUser(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(",", (IEnumerable<object>)value) : value;
        if (str is not null)
        {
            var users = str.ToString().Replace(" ", "").Split(",").ToList();
            UserSelected = users;
        }
    }


}
