@page "/manage/accountant/overview"
@using BlazorBugTracker.Data
@using System.Globalization
@inject ApplicationDbContext _context
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor _httpContextAccessor
<div class="container-fluid p-0">
    <div class="row">
        @if (loading is true)
        {
        <div class="col">
            <div id="preloader">
                <div class="center">
                    <p style="text-align: center;font-size: 14px; font-weight: 800; letter-spacing: 1px; text-transform: uppercase; border-radius: 0; font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;">
                        Just A Second, I'm Loading...
                    </p>
                </div>
            </div>
        </div>
        }
        else
        {
            <LoadingPage OnLoading="@GetData">
                <LoadingContent>
                    <div class="loader">Loading...</div>
                </LoadingContent>
            </LoadingPage>

            <div class="col p-0">
                <div class="card card-dark">
                    <div class="card-header pr-0">
                        <h3 class="card-title">Works Overview</h3>
                    </div>
                    <br />
                    <div class="row p-2">
                        <div class="col-md">
                            <div class="info-box">
                                <span class="info-box-icon bg-primary elevation-1"><i class="fas fa-level-up-alt"></i></span>
                                <div class="info-box-content">
                                    <span class="info-box-text">Current Month Income</span>


                                    <span class="info-box-number">
                                        <strong>$</strong>
                                        @String.Format("{0:n0}", TotalIncome)

                                    </span>


                                </div>
                                <!-- /.info-box-content -->
                            </div>
                            <!-- /.info-box -->
                        </div>
                        <div class="col-md">
                            <div class="info-box">
                                <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-level-down-alt"></i></span>
                                <div class="info-box-content">
                                    <span class="info-box-text">Current Month Expenses</span>
                                    <span class="info-box-number">
                                        <strong>$</strong>
                                        @String.Format("{0:n0}", TotalExpense)
                                    </span>
                                </div>
                                <!-- /.info-box-content -->
                            </div>
                            <!-- /.info-box -->
                        </div>
                        <div class="col-md">
                            <div class="info-box">
                                <span class="info-box-icon bg-success elevation-1"><i class="fas fa-hand-holding-usd"></i></span>
                                <div class="info-box-content">
                                    <span class="info-box-text">Current Month Profit</span>
                                    <span class="info-box-number">
                                        <strong>$</strong>
                                        @String.Format("{0:n0}", TotalProfit)

                                    </span>
                                </div>
                                <!-- /.info-box-content -->
                            </div>
                            <!-- /.info-box -->
                        </div>
                        <div class="col-md">
                            <div class="info-box">
                                <span class="info-box-icon bg-purple elevation-1"><i class="fas fa-money-check"></i></span>
                                <div class="info-box-content">
                                    <span class="info-box-text">Current Month Transactions</span>
                                    <span class="info-box-number">
                                        @CurrentMonthReport.Count
                                        <small> Transactions</small>
                                    </span>
                                </div>
                                <!-- /.info-box-content -->
                            </div>
                            <!-- /.info-box -->
                        </div>
                        <div class="col-md">
                            <div class="info-box">
                                <span class="info-box-icon bg-orange elevation-1"><i class="fas fa-percentage"></i></span>
                                <div class="info-box-content">
                                    <span class="info-box-text">Compare To Last Month</span>
                                    <span class="info-box-number">
                                        @ComparePersentLastMonth.ToString("F")
                                        <small>%</small>
                                    </span>
                                </div>
                                <!-- /.info-box-content -->
                            </div>
                            <!-- /.info-box -->
                        </div>
                    </div>
                    <div class="row">
                        <div class="col ml-3 mr-2">
                            <RadzenChart>
                                <RadzenLineSeries Smooth="true" Data="@Income" CategoryProperty="Time" Title="Income" ValueProperty="Amount">
                                </RadzenLineSeries>
                                <RadzenLineSeries Smooth="true" Data="@Expenses" CategoryProperty="Time" Title="Expenses" ValueProperty="Amount">
                                </RadzenLineSeries>

                                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM yyyy}" />
                                <RadzenValueAxis Formatter="@FormatAsUSD">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Revenue in USD" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col ml-3 mr-2">
                            <RadzenChart>
                                <RadzenLineSeries Smooth="true" Data="@Profit" CategoryProperty="Time" Title="Profit" ValueProperty="Amount">
                                </RadzenLineSeries>
                                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM yyyy}" />
                                <RadzenValueAxis Formatter="@FormatAsUSD">
                                    <RadzenGridLines Visible="true" />
                                    <RadzenAxisTitle Text="Revenue in USD" />
                                </RadzenValueAxis>
                            </RadzenChart>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="card-body">
                                <p class="text-center">
                                    <strong>Income By Category</strong>
                                </p>
                                <RadzenChart>
                                    <RadzenDonutSeries Data="@IncomeDonutChart" Title="Income By Category" CategoryProperty="TicketCategory" ValueProperty="NumberOfTicket">
                                        <TitleTemplate>
                                            <div class="rz-donut-content">

                                            </div>
                                        </TitleTemplate>
                                    </RadzenDonutSeries>
                                </RadzenChart>

                            </div>
                            <!-- /.card-body -->
                        </div>
                        <div class="col-md">
                            <div class="card-body">
                                <p class="text-center">
                                    <strong>Expenses By Category</strong>
                                </p>
                                <RadzenChart>
                                    <RadzenDonutSeries Data="@ExpensesDonutChart" Title="Expenses By Category" CategoryProperty="TicketCategory" ValueProperty="NumberOfTicket">
                                        <TitleTemplate>
                                            <div class="rz-donut-content">

                                            </div>
                                        </TitleTemplate>
                                    </RadzenDonutSeries>
                                </RadzenChart>
                            </div>
                            <!-- /.card-body -->
                        </div>
                    </div>
                    <div class="row">
                        <div class="col ml-2 mr-2">
                            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                            FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@ItemList" TItem="Models.Transaction" ColumnWidth="100%"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            LogicalFilterOperator="LogicalFilterOperator.Or">
                                <Columns>
                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="Time" Title="Time" />
                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="Created" Title="Created" />
                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="Updated" Title="Updated" />

                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="CustomUser" Context="data" Title="User">
                                        <Template Context="data">
                                            @if (userList.FirstOrDefault(c => c.Id == data.CustomUserId) is not null)
                                            {
                                                <p class="mb-0">@userList.FirstOrDefault(c => c.Id == data.CustomUserId).FullName</p>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="UserID" Title="UserID" />
                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="TransactionType" Title="Transaction Type">
                                        <Template Context="data">
                                            @if (TransactionTypeList.FirstOrDefault(c => c.Id == data.TransactionTypeId) is not null)
                                            {
                                                <p class="mb-0">@TransactionTypeList.FirstOrDefault(c => c.Id == data.TransactionTypeId).Name</p>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="Amount" Title="Amount">
                                        <Template Context="data">
                                            @if (data.Amount >= 0)
                                            {
                                                <p class="mb-0"> + $@String.Format("{0:n0}", data.Amount)</p>
                                            }
                                            else
                                            {
                                                <p class="mb-0"> - $@String.Format("{0:n0}", data.Amount * (-1))</p>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="Models.Transaction" Property="Reason" Title="Reason" />
                                </Columns>
                            </RadzenDataGrid>
                        </div>
                    </div>
                </div>

            </div>
        }

    </div>
</div>


@code {
    public List<Models.Transaction> ItemList = new();
    public List<Models.TransactionType> TransactionTypeList = new();
    public List<Models.TransactionTypeModel> RevenueList = new();
    public List<Models.TransactionTypeModel> Income = new();
    public List<Models.TransactionTypeModel> Expenses = new();
    public List<Models.TransactionTypeModel> Profit = new();
    public List<Models.Transaction> CurrentMonthReport = new();
    public List<Models.Transaction> LastMonthReport = new();
    public List<Models.ChartModel> IncomeDonutChart = new();
    public List<Models.ChartModel> ExpensesDonutChart = new();
    public List<Models.CustomUser> userList = new();

    public DateTime currentTime = DateTime.Now;
    public decimal TotalIncome;
    public decimal TotalExpense;
    public decimal TotalProfit;

    public decimal lastMonthTotalIncome;
    public decimal lastMonthTotalExpense;
    public decimal lastMonthTotalProfit;

    public decimal ComparePersentLastMonth;
    public bool loading;

    public Models.CustomUser user = new();

    public bool IsInRoleAdmin;
    public bool IsDeveloper;
    public bool IsSubmitter;
    public bool IsAccountant;
    public bool IsSeniorAccountant;
    public bool IsNewUser;


    public async Task GetData()
    {
        await Task.Delay(1);
        TotalIncome = 0;
        TotalExpense = 0;
        TotalProfit = 0;
        ItemList = _context.Transaction.Where(c => c.Time.Year == currentTime.Year).OrderByDescending(c => c.Time).ToList();
        CurrentMonthReport = ItemList.Where(c => c.Time.Month == currentTime.Month).ToList();
        LastMonthReport = ItemList.Where(c => c.Time.Month == currentTime.AddMonths(-1).Month).ToList();
        userList = _context.Users.ToList();
        foreach (var item in ItemList)
        {
            if (item.Amount >= 0)
            {
                Models.TransactionTypeModel newIncome = new Models.TransactionTypeModel
                {
                    Amount = item.Amount,
                    Time = item.Time
                };
                Income.Add(newIncome);

            }
            if (item.Amount < 0)
            {
                Models.TransactionTypeModel newExpenses = new Models.TransactionTypeModel
                {
                    Amount = item.Amount,
                    Time = item.Time
                };
                Expenses.Add(newExpenses);

            }
            var itemInThatDay = ItemList.Where(c => c.Time.Month == item.Time.Month).ToList();
            decimal amount = 0;
            foreach (var transaction in itemInThatDay)
            {
                amount += transaction.Amount;
            }
            Models.TransactionTypeModel newProfit = new Models.TransactionTypeModel
            {
                Amount = amount,
                Time = item.Time
            };
            if (!Profit.Contains(newProfit))
            {
                Profit.Add(newProfit);
            }
        }
        foreach (var item in CurrentMonthReport)
        {
            if (item.Amount >= 0)
            {

                TotalIncome += item.Amount;
            }
            if (item.Amount < 0)
            {

                TotalExpense += item.Amount;
            }
        }
        TotalProfit = TotalIncome + TotalExpense;
        TotalExpense = TotalExpense * (-1);
        foreach (var item in LastMonthReport)
        {
            if (item.Amount >= 0)
            {

                lastMonthTotalIncome += item.Amount;
            }
            if (item.Amount < 0)
            {

                lastMonthTotalExpense += item.Amount;
            }
        }
        lastMonthTotalProfit = lastMonthTotalIncome + lastMonthTotalExpense;
        lastMonthTotalExpense = lastMonthTotalExpense * (-1);
        ComparePersentLastMonth = TotalProfit / lastMonthTotalProfit * 100;
        TransactionTypeList = _context.TransactionType.ToList();
        foreach (var item in TransactionTypeList)
        {

            ChartModel newTicketStatus = new ChartModel
            {
                TicketCategory = item.Name,
                NumberOfTicket = ItemList.Where(t => t.TransactionTypeId == item.Id && t.Time.Month == currentTime.Month && t.Amount > 0).ToList().Count
            };
            IncomeDonutChart.Add(newTicketStatus);

            ChartModel newTicketStatus2 = new ChartModel
            {
                TicketCategory = item.Name,
                NumberOfTicket = ItemList.Where(t => t.TransactionTypeId == item.Id && t.Time.Month == currentTime.Month && t.Amount < 0).ToList().Count
            };
            ExpensesDonutChart.Add(newTicketStatus2);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = _context.Users.FirstOrDefault(u => u.Email == currrentUser.Identity.Name);
        IsInRoleAdmin = currrentUser.IsInRole(Roles.Admin.ToString());
        IsSeniorAccountant = currrentUser.IsInRole(Roles.SeniorAccountant.ToString());
        IsAccountant = currrentUser.IsInRole(Roles.Accountant.ToString());
        if (IsInRoleAdmin || IsSeniorAccountant || IsAccountant)
        {

            loading = true;
            await GetData();
            loading = false;
        }
        else
        {
            NavigationManager.NavigateTo("/accessdenied");
        }

    }


    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }
}
