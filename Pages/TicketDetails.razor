@page "/ticket/details/{TicketId}"

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@using BlazorBugTracker.Services
@inject ICustomRoleService _roleService
@inject ICustomProjectService _projectService
@inject IImageService _imageService
@inject ICustomFileService _customFileService
@inject IHttpContextAccessor _httpContextAccessor
@inject UserManager<CustomUser> _userManager
@using BlazorBugTracker.Data
@inject ApplicationDbContext _context
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage
@using Microsoft.AspNetCore.Identity.UI.Services
@inject IEmailSender _emailSender
@inject ICustomHistoryService _customHistoryService
@inject NavigationManager NavigationManager
@using System.IO
@if (currentTicket.Name is null || user.FullName is null)
{
    <div class="loader">Loading...</div>
}
else
{

    <div class="row">

        <div class="col-5">
            <div class="card">
                <div class="card-header bg-dark">
                    Ticket #@currentTicket.Id - Details
                </div>

                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-2">
                            Id
                        </dt>
                        <dd class="col-sm-10">
                            #@currentTicket.Id
                        </dd>
                        <dt class="col-sm-2">
                            Name
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.Name
                        </dd>
                        <dt class="col-sm-2">
                            Description
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.Description
                        </dd>
                        <dt class="col-sm-2">
                            Created
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.Created.ToString("dddd dd MMMM yyyy hh:mm tt")
                        </dd>
                        <dt class="col-sm-2">
                            Updated
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.Updated.ToString("dddd dd MMMM yyyy hh:mm tt")
                        </dd>
                        <dt class="col-sm-2">
                            Developer
                        </dt>
                        <dd class="col-sm-10">
                            @if (currentTicket.Developer is not null)
                            {
                                <p>@currentTicket.Developer.FullName</p>
                            }

                        </dd>
                        <dt class="col-sm-2">
                            Ownner
                        </dt>
                        <dd class="col-sm-10">
                            @if (currentTicket.Ownner is not null)
                            {
                                <p>@currentTicket.Ownner.FullName</p>
                            }

                        </dd>
                        <dt class="col-sm-2">
                            Project
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.Project.Name
                        </dd>
                        <dt class="col-sm-2">
                            Status
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.Status.Name
                        </dd>
                        <dt class="col-sm-2">
                            Priority
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.Priority.Name
                        </dd>
                        <dt class="col-sm-2">
                            TicketType
                        </dt>
                        <dd class="col-sm-10">
                            @currentTicket.TicketType.Name
                        </dd>
                    </dl>
                    <div class="row">
                        <div class="col">

                            <!-- Button trigger modal -->
                            <button type="button" class="btn btn-primary">
                                Edit
                            </button>


                            @if (IsInRoleAdmin || IsProjectManager)
                            {

                                <!-- Button trigger modal -->
                                <button type="button" class="btn btn-danger btn-sm mb-1">
                                    <i class="fas fa-trash"></i> Delete
                                </button>



                            }



                            <a class="btn btn-secondary" href="/ticket">Back to List</a>
                        </div>
                    </div>
                </div>

            </div>
            <div class="card">
                <div class="card-header bg-dark">
                    <h3 class="card-title"> Attach File (@(currentTicket.Attachments.Count))</h3>
                </div>
                <div class="card-body">
                    <div class="row ">
                        <form asp-action="Create" asp-controller="TicketAttachments" enctype="multipart/form-data" method="post">
                            <div asp-validation-summary="currentTicketOnly" class="text-danger"></div>
                            <input type="hidden" asp-for="@currentTicket.Id" name="TicketId">
                            <div class="media-body ml-3 ">
                                <label>Description<input name="Description" type="text" class="form-control" required placeholder="Add Description..."></label>
                                <label class="btn btn-outline-secondary btn-sm">
                                    Upload File
                                    <input type="file" required />
                                </label>
                            </div>
                            <div class="row">
                                <div class="col text-center">
                                    <button type="submit" class="btn btn-outline-secondary md-btn-flat">Upload</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">

                        <div class="col">
                            <div class="row clearfix">
                                @if (currentTicket.Attachments.Count != 0)
                                {
                                    foreach (var item in currentTicket.Attachments)
                                    {
                                        <div class="col-sm-2">
                                            <div class="card">
                                                <div class="file">
                                                    <a asp-controller="TicketAttachments" asp-action="Details" asp-route-id="@item.Id">
                                                        <div class="hover">
                                                            <EditForm Model="newTicketAttachment" OnValidSubmit="AddNewAttachment">
                                                                <InputFile OnChange="@LoadFiles" />
                                                                <button type="submit" class="btn btn-icon btn-danger">
                                                                    <i class="fa fa-trash"></i>
                                                                </button>
                                                            </EditForm>

                                                        </div>
                                                        <div class="icon">
                                                            <img src="@_customFileService.GetFileIcon(item.FileName)" style="height:60px;width:60px" />
                                                        </div>
                                                        <div class="file-name">
                                                            <p class="m-b-5 text-muted">@System.IO.Path.GetFileNameWithoutExtension(item.FileName)</p>
                                                            <small>Size: @_customFileService.FormatFileSize(item.FileData.Length) <span class="date text-muted">@item.Created.ToString("dd MMMM yyyy - hh:mm tt")</span></small>
                                                        </div>
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }

                            </div>
                        </div>

                    </div>
                </div>
            </div>





        </div>

        <div class="col">


            <div class="card">
                <div class="card-header bg-dark">
                    <h3 class="card-title">Ticket Histories (@(currentTicket.TicketHistories.Count))</h3>
                    <div class="card-tools">
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control" placeholder="Search Histories" id="searchTicketHistory">
                            <div class="input-group-append">
                                <div class="btn btn-primary">
                                    <i class="fas fa-search"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table" id="tickethistory">
                        <thead>
                            <tr>
                                <th>
                                    Created
                                </th>
                                <th>
                                    Property
                                </th>
                                <th>
                                    Old Value
                                </th>
                                <th>
                                    New Value
                                </th>
                                <th>
                                    User
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (currentTicket.TicketHistories.Count != 0)
                            {
                                foreach (var item in currentTicket.TicketHistories)
                                {
                                    <tr>
                                        <td>
                                            @item.Created.ToString("dddd dd MMMM yyyy hh:mm tt")
                                        </td>
                                        <td>
                                            @item.Property
                                        </td>
                                        <td>
                                            @item.OldValue
                                        </td>
                                        <td>
                                            @item.NewValue
                                        </td>
                                        <td>
                                            @item.CustomUser.FullName
                                        </td>

                                    </tr>
                                }
                            }

                        </tbody>
                    </table>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <div class="card">
                        <div class="card-header bg-dark">
                            Comments (@currentTicket.Comments.Count)
                        </div>
                        <div class="card-body">
                            <EditForm Model="newTicketComment" OnValidSubmit="AddNewComment">
                                <div class="form-group">
                                    <RadzenHtmlEditor @bind-Value=@newTicketComment.Content style="height: 200px; margin-bottom: 1rem;" UploadUrl="upload/image">
                                        <RadzenHtmlEditorUndo />
                                        <RadzenHtmlEditorRedo />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorBold />
                                        <RadzenHtmlEditorItalic />
                                        <RadzenHtmlEditorUnderline />
                                        <RadzenHtmlEditorStrikeThrough />
                                        <RadzenHtmlEditorSeparator />
                                        <RadzenHtmlEditorColor />
                                        <RadzenHtmlEditorBackground />
                                        <RadzenHtmlEditorRemoveFormat />
                                    </RadzenHtmlEditor>
                                </div>

                                <input type="submit" value="Comment" class="btn btn-secondary" />
                            </EditForm>
                        </div>
                    </div>
                    <div class="row">
                        <div class="container">
                            <div class="row">
                                <div class="col">
                                    @if (currentTicket.Comments.Count != 0)
                                    {
                                        foreach (var comment in currentTicket.Comments)
                                        {
                                            var timeSpan = currentTime.Subtract(comment.Created);
                                            var eslapseSecond = timeSpan.Seconds;
                                            var eslapseMinute = timeSpan.Minutes;
                                            var eslapseHours = timeSpan.Hours;
                                            var eslapseDate = timeSpan.Days;
                                            string commentdate;
                                            if (eslapseDate >= 1)
                                            {
                                                commentdate = eslapseDate.ToString() + " Days Ago";

                                            }
                                            else if (eslapseHours >= 1)
                                            {
                                                commentdate = eslapseHours.ToString() + " Hours Ago";
                                            }
                                            else if (eslapseMinute >= 1)
                                            {
                                                commentdate = eslapseMinute.ToString() + " Minutes Ago";
                                            }
                                            else
                                            {
                                                commentdate = eslapseSecond.ToString() + " Seconds Ago";
                                            }
                                            <div class="media mb-4" style="border-bottom:2px solid rgb(28, 213, 219)">
                                                <img class="d-flex mr-3 rounded-circle" style="width:5%" src="@_imageService.DecodeFileAvatar(user.ImageData,user.ContentType)" alt="">
                                                <div class="media-body">
                                                    <div class="row">
                                                        <div class="col text-left">
                                                            <h5 class="mt-0">@comment.CustomUser.FullName</h5>
                                                        </div>
                                                        @if (IsInRoleAdmin || IsProjectManager)
                                                        {
                                                            <div class="col text-right">
                                                                <a class="btn btn-secondary" asp-controller="PostComments" asp-action="Edit" asp-route-id="@comment.Id">Edit</a>
                                                                <a class="btn btn-secondary" asp-controller="PostComments" asp-action="Delete" asp-route-id="@comment.Id">Delete</a>
                                                            </div>
                                                        }

                                                    </div>

                                                    <div class="row" style="margin:0px;padding:0px;margin-bottom:15px">
                                                        <div class="col text-left" style="padding:0px 0px">
                                                            @((MarkupString)comment.Content)
                                                        </div>
                                                        <div class="col text-right">
                                                            <p style="margin:0px;padding:0px;">@commentdate</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        }

                                    }

                                </div>
                            </div>

                        </div>
                    </div>
                </div>


            </div>

        </div>



    </div>

}




<ModalDialog @ref="_editDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Edit Ticket #@currentTicket.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentTicket" OnValidSubmit="Edit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Name</label>
                            <input class="form-control" @bind="currentTicket.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <input class="form-control" @bind="currentTicket.Description" />
                        </div>

                        @if (IsInRoleAdmin || IsProjectManager)
                        {
                            <div class="form-group">
                                <label class="control-label">Project</label>
                                <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Is Assigned ?</label>

                                        <RadzenSelectBar Style="width:100%;" @bind-Value="currentTicket.IsAssigned" TValue="bool">
                                            <Items>
                                                <RadzenSelectBarItem Text="On" Value="true" />
                                                <RadzenSelectBarItem Text="Off" Value="false" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">TicketType</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Developer</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentTicket.DeveloperId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@DeveloperList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Owner</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentTicket.OwnnerId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@OwnerList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Status</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.StatusId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Status..." Data=@TicketStatusList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>







                        }
                        else if (IsSubmitter)
                        {
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Is Assigned ?</label>

                                        <RadzenSelectBar @bind-Value="currentTicket.IsAssigned" TValue="bool">
                                            <Items>
                                                <RadzenSelectBarItem Text="On" Value="true" />
                                                <RadzenSelectBarItem Text="Off" Value="false" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">TicketType</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Ticket Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Developer</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="currentTicket.DeveloperId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@DeveloperList TextProperty="FullName" ValueProperty="Id" />

                                    </div>

                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Project</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>

                            </div>





                        }
                        else
                        {
                            <div class="form-group">
                                <label class="control-label">Project</label>
                                <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                            </div>
                            <div class="form-group">
                                <label class="control-label">Is Assigned?</label>

                                <RadzenSelectBar @bind-Value="currentTicket.IsAssigned" TValue="bool">
                                    <Items>
                                        <RadzenSelectBarItem Text="On" Value="true" />
                                        <RadzenSelectBarItem Text="Off" Value="false" />
                                    </Items>
                                </RadzenSelectBar>


                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Ticket Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>

                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Ticket Type</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="currentTicket.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>



                        }

                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-primary btn-block">Accept Changes</button>
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelEditDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_deleteDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Delete Ticket #@currentTicket.Id</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="currentTicket" OnValidSubmit="Delete">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Name</label>
                            <input class="form-control" readonly @bind="currentTicket.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <input class="form-control" readonly @bind="currentTicket.Description" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Project</label>
                            <input class="form-control" readonly @bind="currentTicket.Project.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Is Assigned?</label>

                            <RadzenSelectBar Disabled="true" @bind-Value="currentTicket.IsAssigned" TValue="bool">
                                <Items>
                                    <RadzenSelectBarItem Text="On" Value="true" />
                                    <RadzenSelectBarItem Text="Off" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Developer</label>
                                    <input class="form-control" readonly value="@currentTicket.Developer.FullName" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Owner</label>
                                    <input class="form-control" readonly value="@currentTicket.Ownner.FullName" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Ticket Status</label>
                                    <input class="form-control" readonly @bind="currentTicket.Status.Name" />
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label class="control-label">Ticket Priority</label>
                                    <input class="form-control" readonly @bind="currentTicket.Priority.Name" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Ticket Type</label>
                            <input class="form-control" readonly @bind="currentTicket.TicketType.Name" />
                        </div>

                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-danger btn-block">Delete</button>
                            </div>
                        </div>
                    </EditForm>
                    <hr />
                    <button class="btn btn-secondary btn-block" @onclick="CancelDeleteDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>






@code {
    [Parameter]
    public string TicketId { get; set; }
    public Models.CustomUser user = new();
    public Models.Ticket currentTicket = new();
    public bool IsInRoleAdmin;
    public bool IsDeveloper;
    public bool IsSubmitter;
    public bool IsProjectManager;
    public bool IsNewUser;
    public DateTime currentTime;
    public List<Models.TicketType> TicketTypeList = new();
    public List<Models.Priority> TicketPriorityList = new();
    public List<Models.Status> TicketStatusList = new();
    public List<Models.Project> ProjectList = new();
    public List<Models.CustomUser> DeveloperList = new();
    public List<Models.CustomUser> OwnerList = new();

    public Models.TicketAttachment newTicketAttachment = new();
    public Models.TicketAttachment currentTicketAttachment = new();
    public Models.Comment newTicketComment = new();
    public Models.Comment currentTicketComment = new();

    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;

    private ModalDialog _editDialog;
    private ModalDialog _deleteDialog;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(TicketId))
        {
            await GetData();
        }

    }

    private async Task OpenEditDialog()
    {
        await _editDialog.Open();
    }
    private async Task CancelEditDialog()
    {
        await _editDialog.Close();
    }
    private async Task OpenDeleteDialog()
    {

        await _deleteDialog.Open();
    }
    private async Task CancelDeleteDialog()
    {
        await _deleteDialog.Close();
    }
    public async Task Edit()
    {
        try
        {
            var ticketId = currentTicket.Id;
            Models.Ticket oldTicket = await _context.Ticket
                .Include(t => t.TicketType)
                .Include(t => t.Status)
                .Include(t => t.Priority)
                .Include(t => t.Developer)
                .AsNoTracking().FirstOrDefaultAsync(t => t.Id == ticketId);
            currentTicket.Updated = DateTime.Now;
            _context.Update(currentTicket);
            _context.SaveChanges();

            var userId = user.Id;
            Models.Ticket newTicket = await _context.Ticket
                .Include(t => t.TicketType)
                .Include(t => t.Status)
                .Include(t => t.Priority)
                .Include(t => t.Developer)
                .AsNoTracking().FirstOrDefaultAsync(t => t.Id == ticketId);
            await _customHistoryService.AddHistoryAsync(oldTicket, newTicket, userId);


            await GetData();
            CancelEditDialog();
            await JSRuntime.InvokeVoidAsync("success", null);

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
    }
    public async Task Delete()
    {
        try
        {
            var ticketId = currentTicket.Id;
            Models.Ticket Ticket = await _context.Ticket
                .Include(t => t.TicketType)
                .Include(t => t.Status)
                .Include(t => t.Priority)
                .Include(t => t.Developer)
                .Include(t => t.Attachments)
                .Include(t => t.Comments)
                .Include(t => t.Ownner)
                .Include(t => t.TicketHistories)
                .ThenInclude(t => t.CustomUser)
                .AsNoTracking().FirstOrDefaultAsync(t => t.Id == ticketId);


            //delete all attachments in 1 ticket
            foreach (var attachment in Ticket.Attachments)
            {
                _context.Attachment.Remove(attachment);
                await _context.SaveChangesAsync();
            }
            //delete all comment in 1 ticket
            foreach (var comment in Ticket.Comments)
            {
                _context.Comment.Remove(comment);
                await _context.SaveChangesAsync();
            }
            //delete all History in 1 ticket
            foreach (var history in Ticket.TicketHistories)
            {
                _context.TicketHistory.Remove(history);
                await _context.SaveChangesAsync();
            }
            _context.Ticket.Remove(Ticket);
            await _context.SaveChangesAsync();


            await GetData();
            CancelDeleteDialog();
            await JSRuntime.InvokeVoidAsync("success", null);
            NavigationManager.NavigateTo("/ticket");

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        using var stream = new MemoryStream();
        var file = e.File;
        var OpenSteam = file.OpenReadStream();
        await OpenSteam.CopyToAsync(stream);

        newTicketAttachment.FileData = stream.ToArray();
        newTicketAttachment.ContentType = e.File.ContentType;
        newTicketAttachment.FileName = e.File.Name;

    }

    public async Task AddNewComment()
    {
        try
        {
            newTicketComment.Created = DateTime.Now;
            newTicketComment.Updated = newTicketComment.Created;
            newTicketComment.CustomUserId = user.Id;
            var id = newTicketComment.TicketId;
            _context.Add(newTicketComment);
            _context.SaveChanges();

            var messageContent = newTicketComment.Content;

            Models.Notification notification = new Models.Notification
            {
                Name = "New Comment on your ticket",
                TicketId = newTicketComment.TicketId,
                Description = $"You have a new comment from {user.FullName} on your ticket {currentTicket.Name}, comment : {messageContent}",
                Created = DateTime.Now,
                SenderId = newTicketComment.CustomUserId,
                RecipientId = currentTicket.DeveloperId
            };
            _context.Notification.Add(notification);
            _context.SaveChanges();


            var receiver = currentTicket.DeveloperId;
            string devEmail = (await _userManager.FindByIdAsync(receiver)).Email;
            string subject = $"New Comment From {(await _userManager.FindByIdAsync(newTicketComment.CustomUserId)).FullName} on your Ticket.";
            string message = $"You have a new Comment from {user.FullName} on Ticket {currentTicket.Name}, comment : {messageContent}";

            await _emailSender.SendEmailAsync(devEmail, subject, message);

            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }

    }
    public async Task AddNewAttachment()
    {
        if (newTicketAttachment.FileData is null)
        {
            await JSRuntime.InvokeVoidAsync("errorFileMissing", null);
        }
        else
        {
            try
            {
                newTicketAttachment.Created = DateTimeOffset.Now;
                newTicketAttachment.CustomUserId = user.Id;
                newTicketAttachment.TicketId = currentTicket.Id;
                _context.Add(newTicketAttachment);
                _context.SaveChanges();
                var projectManager = await _projectService.ProjectManagerOnProjectAsync(currentTicket.ProjectId);
                Models.Notification notification = new Models.Notification
                {
                    Name = $"New Attachment on Ticket #{currentTicket.Id}",
                    Description = $"A new attachment: {newTicketAttachment.FileName} has been uploaded by {user.FullName} into ticket #{currentTicket.Id}",
                    Created = DateTime.Now,
                    SenderId = user.Id,
                    RecipientId = projectManager.Id,
                    TicketId = currentTicket.Id
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();

                await JSRuntime.InvokeVoidAsync("success", null);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("error", null);
            }

        }
    }

    public async Task GetData()
    {
        var id = int.Parse(TicketId);
        currentTicket = _context.Ticket
            .Include(t => t.Ownner)
            .Include(t => t.Developer)
            .Include(t => t.Priority)
            .Include(t => t.Project)
            .Include(t => t.Status)
            .Include(t => t.TicketType)
            .Include(t => t.Attachments)
            .Include(t => t.Comments)
            .Include(t => t.TicketHistories).ThenInclude(t => t.CustomUser)
            .FirstOrDefault(m => m.Id == id);

        currentTime = DateTime.Now;

        TicketTypeList = _context.TicketType.ToList();
        TicketPriorityList = _context.Priority.ToList();
        TicketStatusList = _context.Status.ToList();
        OwnerList = _context.Users.ToList();
        ProjectList = _context.Project.ToList();
        DeveloperList = _context.Users.ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        user = await sessionStorage.GetItemAsync<CustomUser>("user");
        IsInRoleAdmin = await sessionStorage.GetItemAsync<bool>("IsInRoleAdmin");
        IsDeveloper = await sessionStorage.GetItemAsync<bool>("IsDeveloper");
        IsNewUser = await sessionStorage.GetItemAsync<bool>("IsNewUser");
        IsSubmitter = await sessionStorage.GetItemAsync<bool>("IsSubmitter");
        IsProjectManager = await sessionStorage.GetItemAsync<bool>("IsProjectManager");
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("enableTable", null);
        }
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {

    }

}
