@page "/manage/project/user"

@using BlazorBugTracker.Data
@using BlazorBugTracker.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Http
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext _context
@inject UserManager<CustomUser> _userManager
@inject ICustomRoleService _roleService
@inject ICustomProjectService _projectService
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager NavigationManager 
<LoadingPage OnLoading="@GetData">
    <LoadingContent>
        <div class="loader">Loading...</div>
    </LoadingContent>
</LoadingPage>
<div class="container-fluid">
    <div class="shadow-lg mb-5 bg-white rounded">
        <div class="row">
            <div class="col pl-0 pr-0">
                <div class="card mb-0">
                    <div class="card-header bg-dark">
                        <h3 class="card-title">Manager User Project</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="userProject" OnValidSubmit="AddUserToProject">
                            <div class="row">
                                <div class="col-md p-3">
                                    <div class="row">
                                        <div class="col">
                                            Project
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <div class="form-group">
                                                <RadzenListBox AllowFiltering="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@ProjectSelected Data=@ProjectList TextProperty="Name" ValueProperty="Id"
                                                               Change="@(args => OnChangeSelectProjet(args))" TValue="int" Placeholder="Select Project..." Style="height:300px;width:100%" />
                                            </div>


                                        </div>

                                    </div>
                                </div>
                                <div class="col-md  p-3">
                                    <div class="row">
                                        <div class="col">
                                            Project Manager
                                        </div>

                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <div class="form-group">
                                                <RadzenListBox AllowFiltering="true" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value=@ProjectManagerSelected Data=@ProjectManagerList TextProperty="FullName" ValueProperty="Id"
                                                               TValue="string" Placeholder="Select Project Manager..." Style="height:300px;width:100%" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md p-3">
                                    <div class="row">
                                        <div class="col">
                                            Developers
                                        </div>

                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <div class="card card-default">
                                                <div class="card-body" style="padding:0;">
                                                    <div class="row">
                                                        <div class="col-12">


                                                            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="DeveloperSelected" TValue="IEnumerable<string>" Multiple="true" Data=@DeveloperList
                                                                           Change=@(args => OnChangeSelectDeveloper(args)) Placeholder="Select Developer..." TextProperty="FullName" ValueProperty="Id" Style="height:300px;width:100%" />


                                                            <!-- /.form-group -->
                                                        </div>
                                                        <!-- /.col -->
                                                    </div>
                                                    <!-- /.row -->
                                                </div>
                                                <!-- /.card-body -->
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <div class="col-md p-3">
                                    <div class="row">
                                        <div class="col">
                                            Submitters
                                        </div>

                                    </div>
                                    <div class="row">
                                        <div class="col">
                                            <div class="card card-default">
                                                <div class="card-body" style="padding:0;">
                                                    <div class="row">
                                                        <div class="col-12">


                                                            <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="SubmitterSelected" TValue="IEnumerable<string>" Multiple="true" Data=@SubmitterList
                                                                           Change=@(args => OnChangeSelectSubmitter(args)) Placeholder="Select Submitter..." TextProperty="FullName" ValueProperty="Id" Style="height:300px;width:100%" />


                                                            <!-- /.form-group -->
                                                        </div>
                                                        <!-- /.col -->
                                                    </div>
                                                    <!-- /.row -->
                                                </div>
                                                <!-- /.card-body -->
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>

                            <div class="row justify-content-center">
                                <div class="col-4 text-center">
                                    @if (_isButtonLoading)
                                    {
                                        <button type="button" disabled class="btn btn-primary btn-block">
                                            <i class="fa fa-spinner fa-spin"></i> Loading...
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-primary btn-block">
                                            <span class="iconify" data-icon="dashicons:yes-alt"></span> Save
                                        </button>
                                    }

                                </div>
                            </div>
                        </EditForm>
                        <br />
                        <div class="row">
                            <div class="col">
                                <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                                FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@ProjectList" TItem="Models.Project" ColumnWidth="100%"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                LogicalFilterOperator="LogicalFilterOperator.Or">
                                    <Columns>
                                        <RadzenDataGridColumn TItem="Models.Project" Property="Id" Title="ID" Width="50px" TextAlign="TextAlign.Center" />

                                        <RadzenDataGridColumn TItem="Models.Project" Property="Name" Title="Name" Width="250px" />
                                        <RadzenDataGridColumn TItem="Models.Project" Property="Description" Title="Description" />
                                        <RadzenDataGridColumn TItem="Models.Project" Property="Id" Title="PM" Width="150px">
                                            <Template Context="data">
                                                @if (_projectService.ProjectManagerOnProject(data.Id) is not null)
                                                {
                                                    <p>@_projectService.ProjectManagerOnProject(data.Id).FullName</p>
                                                }


                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Project" Title="Developer" Width="150px">
                                            <Template Context="data">
                                                @foreach (var item in _projectService.DeveloperOnProject(data.Id).ToList())
                                                {
                                                    <p>@item.FullName</p>
                                                }

                                            </Template>
                                        </RadzenDataGridColumn>
                                        <RadzenDataGridColumn TItem="Models.Project" Title="Submitter" Width="150px">
                                            <Template Context="data">
                                                @foreach (var item in _projectService.SubmitterOnProject(data.Id).ToList())
                                                {
                                                    <p>@item.FullName</p>
                                                }

                                            </Template>
                                        </RadzenDataGridColumn>
                                    </Columns>
                                </RadzenDataGrid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    </div>
</div>

@code {
    private bool _isButtonLoading = false;

    public List<Models.CustomUser> AllUser = new();
    public List<Models.CustomUser> DeveloperList = new();
    public List<Models.CustomUser> SubmitterList = new();
    public List<Models.CustomUser> ProjectManagerList = new();
    public List<Models.Project> ProjectList = new();
    public Models.CustomUser user = new();

    public bool IsInRoleAdmin;
    public List<IdentityRole> RoleList = new();
    public IEnumerable<string> DeveloperSelected = Enumerable.Empty<string>();
    public IEnumerable<string> SubmitterSelected = Enumerable.Empty<string>();
    public Models.ChangeUserModel userProject = new();
    public int ProjectSelected;
    public int ViewProjectSelected;
    public string ProjectManagerSelected;

    protected override async Task  OnInitializedAsync()
    {
        var currrentUser = _httpContextAccessor.HttpContext.User;
        IsInRoleAdmin = currrentUser.IsInRole(Roles.Admin.ToString());
        user = _context.Users.FirstOrDefault(u => u.Email == currrentUser.Identity.Name);

        if (IsInRoleAdmin)
        {
            await GetData();
        }
        else
        {
            NavigationManager.NavigateTo("/accessdenied");
        }

    }

    public async Task GetData()
    {
        await Task.Delay(100);
        DeveloperList = new();
        SubmitterList = new();
        ProjectManagerList = new();
        AllUser = _context.Users.ToList();
        ProjectList = _context.Project.Include(p => p.CustomUsers).ToList();
        RoleList = _context.Roles.ToList();


        var DeveloperRoleId = RoleList.FirstOrDefault(r => r.Name == Roles.Developer.ToString()).Id;
        var DeveloperListId = _context.UserRoles.Where(r => r.RoleId == DeveloperRoleId).ToList();
        foreach (var item in DeveloperListId)
        {
            DeveloperList.Add(AllUser.FirstOrDefault(r => r.Id == item.UserId));
        }


        var SubmitterRoleId = RoleList.FirstOrDefault(r => r.Name == Roles.Submitter.ToString()).Id;
        var SubmitterListId = _context.UserRoles.Where(r => r.RoleId == SubmitterRoleId).ToList();
        foreach (var item in SubmitterListId)
        {
            SubmitterList.Add(AllUser.FirstOrDefault(r => r.Id == item.UserId));
        }


        var ProjectManagerRoleId = RoleList.FirstOrDefault(r => r.Name == Roles.ProjectManager.ToString()).Id;
        var ProjectManagerListId = _context.UserRoles.Where(r => r.RoleId == ProjectManagerRoleId).ToList();
        foreach (var item in ProjectManagerListId)
        {
            ProjectManagerList.Add(AllUser.FirstOrDefault(r => r.Id == item.UserId));
        }


    }
    public async Task AddUserToProject()
    {
        try
        {
            _isButtonLoading = true;
            if (!_roleService.ReturnUserRole3(user).ToLower().Contains("demo"))
            {
                List<Models.CustomUser> UserToAdd = new();
                Models.Project project = ProjectList.FirstOrDefault(p => p.Id == ProjectSelected);
                foreach (var user in project.CustomUsers.ToList())
                {
                    project.CustomUsers.Remove(user);
                }
                var ProjectManagerToAdd = AllUser.FirstOrDefault(p => p.Id == ProjectManagerSelected);
                UserToAdd.Add(ProjectManagerToAdd);

                foreach (var developer in DeveloperSelected.ToList())
                {
                    var user = AllUser.FirstOrDefault(u => u.Id == developer);

                    UserToAdd.Add(user);
                }
                foreach (var submitter in SubmitterSelected.ToList())
                {
                    var user = AllUser.FirstOrDefault(u => u.Id == submitter);

                    UserToAdd.Add(user);
                }


                project.CustomUsers = UserToAdd.Distinct().ToList();
                _context.Update(project);
                _context.SaveChanges();


                ProjectManagerSelected = null;
                DeveloperSelected = Enumerable.Empty<string>();
                SubmitterSelected = Enumerable.Empty<string>();
                ProjectSelected = 0;
                GetData();
                await JSRuntime.InvokeVoidAsync("success", null);
            }
            else
            {
                NavigationManager.NavigateTo("/demouserwarning");
            }

        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
        finally
        {
            _isButtonLoading = false;
        }


    }

    public void OnChangeSelectProjet(object value)
    {
        ProjectManagerSelected = null;
        DeveloperSelected = Enumerable.Empty<string>();
        SubmitterSelected = Enumerable.Empty<string>();
        var str = value is IEnumerable<object> ? string.Join(",", (IEnumerable<object>)value) : value;
        ProjectSelected = Convert.ToInt32(str.ToString());
        var projectManagerOnProject = _projectService.ProjectManagerOnProject(ProjectSelected);
        if (projectManagerOnProject is not null)
        {
            ProjectManagerSelected = projectManagerOnProject.Id;

        }
        var DeveloperOnProject = _projectService.DeveloperOnProject(ProjectSelected).ToList().Select(d => d.Id).ToList();
        if (DeveloperOnProject.Count != 0)
        {
            DeveloperSelected = DeveloperOnProject;
        }
        var SubmitterOnProject = _projectService.SubmitterOnProject(ProjectSelected).ToList().Select(d => d.Id).ToList();
        if (SubmitterOnProject.Count != 0)
        {
            SubmitterSelected = SubmitterOnProject;
        }

    }


    public void OnChangeSelectDeveloper(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        if (str is not null)
        {
            var develop = str.ToString().Replace(" ", "");
            var users = develop.Split(",").ToList();
            DeveloperSelected = users;
        }
    }

    public void OnChangeSelectSubmitter(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        if (str is not null)
        {
            var submit = str.ToString().Replace(" ", "");
            var users = submit.Split(",").ToList();
            SubmitterSelected = users;
        }
    }


}
