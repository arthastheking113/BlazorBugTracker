@page "/"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore
@using BlazorBugTracker.Services
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.Routing;
@using System.Text.Encodings.Web
@using System.Collections.Generic
@inject IEmailSender _emailSender
@inject ICustomRoleService _roleService
@inject ICustomProjectService _projectService
@inject IHttpContextAccessor _httpContextAccessor
@inject UserManager<CustomUser> _userManager
@using BlazorBugTracker.Data
@inject ApplicationDbContext _context
@inject IJSRuntime JSRuntime
@inject ISessionStorageService sessionStorage
@inject ICustomHistoryService _customHistoryService
@inject IImageService _imageService

@inject LinkGenerator _generator
@if (ItemList is null || user is null)
{
    <div class="loader">Loading...</div>
}
else
{
    <div class="container-fluid">
        <div class="row mt-2">
            @if (IsInRoleAdmin || IsProjectManager)
            {
                <div class="col">
                    <div class="card">
                        <div class="card-header bg-dark">
                            <h5 class="card-title">Quick Management Action</h5>
                        </div>
                        <div class="card-body" style="padding-right:10px">
                            <button type="button" @onclick="OpenCreateTicketDialog" class="btn btn-secondary pb-2 mb-2">
                                <i class="fas fa-plus-square"></i> Create New Ticket
                            </button>


                            <button type="button" @onclick="OpenCreateProjectDialog" class="btn btn-secondary pb-2 mb-2">
                                <i class="fas fa-plus-circle"></i> Create New Project
                            </button>


                            <a href="/project" class="btn text-white btn-secondary pb-2 mb-2"><i class="fas fa-tasks"></i> View Projects </a>

                            <a href="/manage/role" class="btn  text-white btn-secondary pb-2 mb-2"><i class="fas fa-people-arrows"></i> Role's Management </a>

                            <a href="/manage/project/user" class="btn text-white btn-secondary pb-2 mb-2"><i class="fas fa-user-edit"></i> Project User Management</a>

                            <button type="button" @onclick="OpenInviteDialog" class="btn btn-secondary pb-2 mb-2">
                                <i class="fas fa-location-arrow"></i> Create a Invite Ticket
                            </button>


                        </div>
                    </div>
                </div>



            }
            else if (IsSubmitter)
            {
                <div class="col">
                    <div class="card">
                        <div class="card-header bg-dark">
                            <h5 class="card-title">Quick Management Action</h5>
                        </div>
                        <div class="card-body" style="padding-right:10px">
                            <button type="button" @onclick="OpenCreateTicketDialog" class="btn btn-secondary pb-2 mb-2">
                                <i class="fas fa-plus-square"></i> Create New Ticket
                            </button>


                            <a href="/ticket" class="btn btn-secondary pb-2 mb-2"><i class="nav-icon fas fa-ticket-alt"></i> View All Tickets</a>

                            <button type="button" @onclick="OpenInviteDialog" class="btn btn-secondary pb-2 mb-2">
                                <i class="fas fa-location-arrow"></i> Create a Invite Ticket
                            </button>


                        </div>
                    </div>
                </div>

            }
            else if (IsDeveloper)
            {
                <div class="col">
                    <div class="card">
                        <div class="card-header bg-dark">
                            <h5 class="card-title">Quick Management Action</h5>
                        </div>
                        <div class="card-body" style="padding-right:10px">
                            <button type="button" @onclick="OpenCreateTicketDialog" class="btn btn-secondary pb-2 mb-2">
                                <i class="fas fa-plus-square"></i> Create New Ticket
                            </button>


                            <a href="/ticket" class="btn btn-secondary pb-2 mb-2"><i class="nav-icon fas fa-ticket-alt"></i> View All Tickets</a>
                            <button type="button" class="btn btn-secondary pb-2 mb-2">
                                <i class="fas fa-location-arrow"></i> Create a Invite Ticket
                            </button>


                        </div>
                    </div>
                </div>


            }



        </div>

        <div class="row">
            <div class="col">
                <!-- DONUT CHART -->
                <div class="card card-dark">
                    <div class="card-header">
                        <h3 class="card-title">Works Overview</h3>
                    </div>
                    <br />
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col ml-2">
                                <div class="info-box">
                                    <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-percentage"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">Works Process</span>
                                        @if (PresentOfWork != 0)
                                        {
                                            <span class="info-box-number">
                                                @PresentOfWork.ToString("#.##")
                                                <small>%</small>
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="info-box-number">
                                                0
                                                <small>%</small>
                                            </span>
                                        }

                                    </div>
                                    <!-- /.info-box-content -->
                                </div>
                                <!-- /.info-box -->
                            </div>
                            <div class="col ml-2">
                                <div class="info-box">
                                    <span class="info-box-icon bg-warning elevation-1"><i class="fas fa-exclamation"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">Un-Assign Tickets</span>
                                        <span class="info-box-number">
                                            @NumberOfUnAssignTicket
                                            <small>Tickets</small>
                                        </span>
                                    </div>
                                    <!-- /.info-box-content -->
                                </div>
                                <!-- /.info-box -->
                            </div>
                            <div class="col ml-2">
                                <div class="info-box">
                                    <span class="info-box-icon bg-lime elevation-1"><i class="fas fa-file-alt"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">New Tickets In Last 7 Days</span>
                                        <span class="info-box-number">
                                            @TicketNewInPast7Day
                                            <small>Tickets</small>
                                        </span>
                                    </div>
                                    <!-- /.info-box-content -->
                                </div>
                                <!-- /.info-box -->
                            </div>
                            <div class="col ml-2">
                                <div class="info-box">
                                    <span class="info-box-icon bg-cyan elevation-1"><i class="fas fa-check-circle"></i></span>
                                    <div class="info-box-content">
                                        <span class="info-box-text">Tickets Resolved In Last 7 Days</span>
                                        <span class="info-box-number">
                                            @TicketDoneInPast7Day
                                            <small>Tickets</small>
                                        </span>
                                    </div>
                                    <!-- /.info-box-content -->
                                </div>
                                <!-- /.info-box -->
                            </div>


                        </div>
                    </div>

                    <div class="row">
                        <div class="col">
                            <div class="card-body">
                                <div class="info-box mb-3 bg-warning">
                                    <span class="info-box-icon"><i class="fas fa-tasks"></i></span>

                                    <div class="info-box-content">
                                        <span class="info-box-text">Projects</span>
                                        <span class="info-box-number">@ProjectList.Count</span>
                                    </div>
                                    <!-- /.info-box-content -->
                                </div>
                                <!-- /.info-box -->
                                <div class="info-box mb-3 bg-success">
                                    <span class="info-box-icon"><i class="fas fa-ticket-alt"></i></span>

                                    <div class="info-box-content">
                                        <span class="info-box-text">Tickets</span>
                                        <span class="info-box-number">@AllItemList.Count</span>
                                    </div>

                                    <!-- /.info-box-content -->
                                </div>
                                <!-- /.info-box -->
                                <div class="info-box mb-3 bg-danger">
                                    <span class="info-box-icon"><i class="fas fa-users"></i></span>

                                    <div class="info-box-content">
                                        <span class="info-box-text">User</span>
                                        <span class="info-box-number">@AllUser.Count</span>
                                    </div>
                                    <!-- /.info-box-content -->
                                </div>


                                <!-- /.info-box -->
                            </div>
                        </div>
                        <div class="col">
                            <div class="card-body">
                                <RadzenChart>
                                    <RadzenDonutSeries Data="@TicketTypeChart" Title="Number Of Ticket Type" CategoryProperty="TicketCategory" ValueProperty="NumberOfTicket">
                                        <TitleTemplate>
                                            <div class="rz-donut-content">

                                            </div>
                                        </TitleTemplate>
                                    </RadzenDonutSeries>
                                </RadzenChart>
                                <p class="text-center">
                                    <strong>Tickets By Type</strong>
                                </p>
                            </div>
                            <!-- /.card-body -->
                        </div>
                        <div class="col">
                            <div class="card-body">
                                <RadzenChart>
                                    <RadzenDonutSeries Data="@TicketStatusChart" Title="Number Of Ticket Status" CategoryProperty="TicketCategory" ValueProperty="NumberOfTicket">
                                        <TitleTemplate>
                                            <div class="rz-donut-content">

                                            </div>
                                        </TitleTemplate>
                                    </RadzenDonutSeries>
                                </RadzenChart>
                                <p class="text-center">
                                    <strong>Tickets By Status</strong>
                                </p>
                            </div>
                            <!-- /.card-body -->
                        </div>
                        <div class="col">
                            <div class="card-body">
                                <RadzenChart>
                                    <RadzenDonutSeries Data="@TicketPriorityChart" Title="Number Of Ticket Priority" CategoryProperty="TicketCategory" ValueProperty="NumberOfTicket">
                                        <TitleTemplate>
                                            <div class="rz-donut-content">

                                            </div>
                                        </TitleTemplate>
                                    </RadzenDonutSeries>
                                </RadzenChart>
                                <p class="text-center">
                                    <strong>Tickets By Priority</strong>
                                </p>
                            </div>
                            <!-- /.card-body -->
                        </div>
                    </div>


                </div>
                <!-- /.card -->
            </div>

        </div>
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header bg-dark">
                        <h5 class="card-title">My Tickets</h5>
                    </div>
                    <div class="card-header">
                        <h3 class="card-title">Manage All of my Tickets</h3>
                        <div class="card-tools">
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" placeholder="Search Ticket" id="myInputHomeField">
                                <div class="input-group-append">
                                    <div class="btn btn-primary">
                                        <i class="fas fa-search"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- /.card-tools -->
                    </div>
                    <!-- /.card-header -->
                    <!-- /.card-header -->
                    <div class="card-body">
                        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                                        FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@ItemList" TItem="Models.Ticket" ColumnWidth="100%"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        LogicalFilterOperator="LogicalFilterOperator.Or">
                            <Columns>
                                <RadzenDataGridColumn TItem="Models.Ticket" Title="Id" Width="50px">
                                    <Template Context="data">
                                        <p>
                                            #@data.Id
                                        </p>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="Name" Title="Name" />

                                <RadzenDataGridColumn TItem="Models.Ticket" Property="Description" Title="Description" />
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="Created" Title="Created">
                                    <Template Context="data">
                                        <p>
                                            @data.Created.ToString("dd MMMM yyyy - hh:mm tt")
                                        </p>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="Updated" Title="Updated">
                                    <Template Context="data">
                                        <p>
                                            @data.Updated.ToString("dd MMMM yyyy - hh:mm tt")
                                        </p>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="Developer" Title="Updated">
                                    <Template Context="data">
                                        @if (data.Developer is not null)
                                        {
                                            <p>@data.Developer.FullName</p>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="Ownner" Title="Ownner">
                                    <Template Context="data">
                                        @if (data.Ownner is not null)
                                        {
                                            <p>@data.Ownner.FullName</p>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="Project" Title="Project">
                                    <Template Context="data">
                                        @if (data.Project is not null)
                                        {
                                            <p>@data.Project.Name</p>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="IsAssigned" Width="70px" Title="Assign?">
                                    <Template Context="data">
                                        @if (data.IsAssigned)
                                        {
                                            <p>Y</p>
                                        }
                                        else
                                        {
                                            <p>N</p>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Width="100px" Property="Status" Title="Status">
                                    <Template Context="data">
                                        @if (data.Status is not null)
                                        {
                                            <p>@data.Status.Name</p>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Width="100px" Property="Priority" Title="Priority">
                                    <Template Context="data">
                                        @if (data.Priority is not null)
                                        {
                                            <p>@data.Priority.Name</p>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Property="TicketType" Title="Type">
                                    <Template Context="data">
                                        @if (data.TicketType is not null)
                                        {
                                            <p>@data.TicketType.Name</p>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="Models.Ticket" Width="90px">
                                    <Template Context="data">
                                        <div class="btn-group-vertical">
                                            <a class="btn btn-primary btn-sm mb-1" href="/ticket/details/@data.Id"><i class="fas fa-folder"></i> View</a>

                                        </div>


                                    </Template>
                                </RadzenDataGridColumn>

                            </Columns>
                        </RadzenDataGrid>

                    </div>
                    <!-- ./card-body -->
                </div>
            </div>
        </div>
    </div>

}



<ModalDialog @ref="_createTicketDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create New Ticket</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newTicketItem" OnValidSubmit="AddTicket">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label class="control-label">Name</label>
                            <input class="form-control" @bind="newTicketItem.Name" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <input class="form-control" @bind="newTicketItem.Description" />
                        </div>

                        <div class="form-group">
                            <label class="control-label">Project</label>
                            <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newTicketItem.ProjectId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                            Placeholder="Select Project..." Data=@ProjectList TextProperty="Name" ValueProperty="Id" />

                        </div>
                        @if (IsInRoleAdmin || IsProjectManager)
                        {


                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Developer</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newTicketItem.DeveloperId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@DeveloperList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Owner</label>
                                        <RadzenDropDown AllowClear="true" TValue="string" @bind-Value="newTicketItem.OwnnerId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Developer..." Data=@OwnerList TextProperty="FullName" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Status</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newTicketItem.StatusId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Status..." Data=@TicketStatusList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="control-label">Priority</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newTicketItem.PriorityId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Priority..." Data=@TicketPriorityList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">

                                    <div class="form-group">
                                        <label class="control-label">Is Assigned?</label>

                                        <RadzenSelectBar Style="width:100%;" @bind-Value="newTicketItem.IsAssigned" TValue="bool">
                                            <Items>
                                                <RadzenSelectBarItem Text="On" Value="true" />
                                                <RadzenSelectBarItem Text="Off" Value="false" />
                                            </Items>
                                        </RadzenSelectBar>
                                    </div>
                                </div>
                                <div class="col">

                                    <div class="form-group">
                                        <label class="control-label">TicketType</label>
                                        <RadzenDropDown AllowClear="true" TValue="int" @bind-Value="newTicketItem.TicketTypeId" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                        Placeholder="Select Ticket Type..." Data=@TicketTypeList TextProperty="Name" ValueProperty="Id" />

                                    </div>
                                </div>
                            </div>


                        }



                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-success btn-block">Create</button>
                            </div>
                        </div>
                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelCreateTicketDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_createProjectDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create New Project</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newProjectItem" OnValidSubmit="AddProject">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="row">
                            <div class="col">
                                <img class="img-fluid" src="@_imageService.DecodeFile(newProjectItem.ImageData, newProjectItem.ContentType)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Project Name</label>
                            <input @bind="newProjectItem.Name" class="form-control" required />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Description</label>
                            <textarea @bind="newProjectItem.Description" class="form-control" rows="4" required></textarea>
                        </div>

                        <div class="form-group">
                            <label class="control-label">Upload Image</label>
                            <InputFile OnChange="@LoadFilesNew" />
                        </div>
                        <div class="form-group">
                            <label class="control-label">Company</label>
                            <RadzenDropDown AllowClear="true" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                            @bind-Value="newProjectItem.CompanyId" Placeholder="Select Company..." Data=@CompanyList TextProperty="Name" ValueProperty="Id" />

                        </div>

                        <input type="submit" value="Create new Project" class="btn btn-outline-success btn-block">


                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelCreateProjectDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


<ModalDialog @ref="_createInviteDialog"
             OverlayOpacity="_overlayOpacity"
             MinHeight="@_modalMinHeight"
             MinWidth="@_modalMinWitdth"
             Width="_editModalWidth"
             CloseOnOverlayClick="_modalCloseOnClick"
             CloseOnEscapeKey="_modalCloseOnEsc"
             Focus="_modalFocus"
             Animate="_modalAnimate"
             Centered="_modalCentered"
             ShowCloseButton="_modalShowClose">
    <Header>
        @*If you want to hide Header remove the whole Header definition and set ShowCloseButton="false"*@
        <h4>Create Invite Ticket</h4>
    </Header>
    <Content>
        <div class="container-fluid">
            <div class="row pb-2">
                <div class="col">
                    <EditForm Model="newInvite" OnValidSubmit="SendInvite">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label class="control-label">Email</label>
                            <input class="form-control" @bind="newInvite.Email" type="email" placeholder="Enter your Email..." required />
                        </div>
                        @if (IsInRoleAdmin)
                        {
                            <div class="form-group">
                                <label class="control-label">Company Name</label>
                                <input name="CompanyName" class="form-control" @bind="newInvite.CompanyName" placeholder="Enter your company name..." required />
                            </div>
                        }


                        @if (IsProjectManager || IsInRoleAdmin)
                        {

                            <div class="form-group">
                                <label class="control-label">Assign Role</label>
                                <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Style="width:100%;"
                                                @bind-Value="newInvite.Role" Placeholder="Select Role..." Data=@RoleList TextProperty="Name" ValueProperty="Name" />

                            </div>
                        }

                        <br />
                        <div class="row">
                            <div class="col">
                                <button type="submit" class="btn btn-outline-success btn-block">Send Invitaion</button>
                            </div>
                        </div>
                    </EditForm>
                    <br />
                    <button class="btn btn-secondary btn-block" @onclick="CancelInviteDialog">Cancel</button>
                </div>
            </div>
        </div>
    </Content>
</ModalDialog>


@code{
    public Models.CustomUser user = new();
    public bool IsInRoleAdmin;
    public bool IsDeveloper;
    public bool IsSubmitter;
    public bool IsProjectManager;
    public bool IsNewUser;
    public int NumberOfTicketType;
    public int NumberOfTicketPriority;
    public int NumberOfTicketStatus;
    public int NumberOfUnAssign;
    public int TicketCloseId;
    public decimal PresentOfWork;
    public int NumberOfUnAssignTicket;
    public int TicketNewInPast7Day;
    public int TicketDoneInPast7Day;
    public DateTime currentTime;


    //Fully customized dialog
    private double _overlayOpacity = 0.3;
    private double _modalMinHeight = 100;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private double _editModalWidth;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;


    private ModalDialog _createTicketDialog;
    private ModalDialog _createProjectDialog;
    private ModalDialog _createInviteDialog;
    public Models.Ticket newTicketItem = new();
    public Models.Project newProjectItem = new();
    public Models.Invite newInvite = new();



    public List<Models.CustomUser> AllUser = new();
    public List<Models.ChartModel> TicketTypeChart = new();
    public List<Models.ChartModel> TicketPriorityChart = new();
    public List<Models.ChartModel> TicketStatusChart = new();
    public List<Models.Ticket> ItemList = new();
    public List<Models.Ticket> AllItemList = new();
    public List<Models.TicketType> TicketTypeList = new();
    public List<Models.Priority> TicketPriorityList = new();
    public List<Models.Status> TicketStatusList = new();
    public List<Models.Project> ProjectList = new();
    public List<Models.Company> CompanyList = new();
    public List<Models.CustomUser> DeveloperList = new();
    public List<Models.CustomUser> OwnerList = new();
    public List<IdentityRole> RoleList = new();
    protected override async Task OnInitializedAsync()
    {
        if (_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
        {
            await GetData();
        }

    }


    public async Task GetData()
    {
        currentTime = DateTime.Now;
        var currrentUser = _httpContextAccessor.HttpContext.User;
        user = await _userManager.GetUserAsync(currrentUser);
        IsInRoleAdmin = await _userManager.IsInRoleAsync(user, Roles.Admin.ToString());
        IsDeveloper = await _userManager.IsInRoleAsync(user, Roles.Developer.ToString());
        IsNewUser = await _userManager.IsInRoleAsync(user, Roles.NewUser.ToString());
        IsSubmitter = await _userManager.IsInRoleAsync(user, Roles.Submitter.ToString());
        IsProjectManager = await _userManager.IsInRoleAsync(user, Roles.ProjectManager.ToString());

        AllUser = _context.Users.ToList();
        ProjectList = _context.Project.ToList();
        TicketCloseId = _context.Status.FirstOrDefault(t => t.Name == "Closed").Id;
        CompanyList = _context.Company.ToList();
        RoleList = _context.Roles.ToList();
        AllItemList = _context.Ticket
            .Include(t => t.Attachments)
            .Include(t => t.Comments)
            .Include(t => t.Developer)
            .Include(t => t.Ownner)
            .Include(t => t.Priority)
            .Include(t => t.Project)
            .Include(t => t.Status)
            .Include(t => t.TicketHistories)
            .Include(t => t.TicketType).ToList();
        ItemList = AllItemList;

        var number_of_close_ticket = AllItemList.Where(t => t.StatusId == TicketCloseId).ToList().Count;
        PresentOfWork = number_of_close_ticket * 100 / AllItemList.Count;
        NumberOfUnAssignTicket = AllItemList.Where(i => !i.IsAssigned).Count();
        TicketNewInPast7Day = AllItemList.Where(t => t.Created >= currentTime.AddDays(-7)).ToList().Count;
        TicketDoneInPast7Day = AllItemList.Where(t => t.Updated >= currentTime.AddDays(-7) && t.StatusId == TicketCloseId).ToList().Count;


        GetDataChart();

        if (IsInRoleAdmin)
        {

        }
        else if (IsProjectManager)
        {
            var allProject = _context.Project.ToList();
            List<Models.Project> listProjectOfProjectManager = new List<Models.Project>();

            foreach (var item in allProject)
            {
                var isUserOnProject = _projectService.IsUserOnProject(user.Id, item.Id);
                if (isUserOnProject)
                {
                    listProjectOfProjectManager.Add(item);
                }
            }
            List<Models.Ticket> projectManagerView = new List<Models.Ticket>();
            foreach (var item in listProjectOfProjectManager)
            {
                foreach (var itemInTicket in ItemList)
                {
                    if (itemInTicket.ProjectId == item.Id)
                    {
                        projectManagerView.Add(itemInTicket);
                    }
                }
            }
            ItemList = projectManagerView;
        }
        else if (IsSubmitter)
        {

            ItemList = ItemList.Where(u => u.OwnnerId == user.Id).ToList();
        }
        else
        {
            ItemList = ItemList.Where(u => u.DeveloperId == user.Id).ToList();
        }

    }



    private async Task OpenCreateTicketDialog()
    {
        newTicketItem = new();
        await _createTicketDialog.Open();
    }
    private async Task CancelCreateTicketDialog()
    {

        await _createTicketDialog.Close();
    }
    private async Task OpenCreateProjectDialog()
    {
        newProjectItem = new();
        await _createProjectDialog.Open();
    }
    private async Task CancelCreateProjectDialog()
    {

        await _createProjectDialog.Close();
    }
    private async Task OpenInviteDialog()
    {
        newInvite = new();
        await _createInviteDialog.Open();
    }
    private async Task CancelInviteDialog()
    {

        await _createInviteDialog.Close();
    }
    private async Task LoadFilesNew(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        newProjectItem.ImageData = buffers.ToArray();
        newProjectItem.ContentType = imgFile.ContentType;


        //using var stream = new MemoryStream();
        //var file = e.File;
        //var OpenSteam = file.OpenReadStream();
        //await OpenSteam.CopyToAsync(stream);

        //newItem.ImageData = stream.ToArray();
        //newItem.ContentType = e.File.ContentType;

    }
    public async Task AddTicket()
    {
        try
        {
            newTicketItem.OwnnerId = user.Id;
            newTicketItem.Created = DateTime.Now;
            newTicketItem.Updated = newTicketItem.Created;
            if (IsDeveloper || IsSubmitter)
            {
                newTicketItem.TicketTypeId = _context.TicketType.FirstOrDefault(t => t.Name == "UnAssign").Id;
                newTicketItem.PriorityId = _context.Priority.FirstOrDefault(t => t.Name == "UnAssign").Id;
                newTicketItem.StatusId = _context.Status.FirstOrDefault(t => t.Name == "UnAssign").Id;
            }

            _context.Add(newTicketItem);
            _context.SaveChanges();


            var currentClosedStatusId = _context.Status.FirstOrDefault(t => t.Name == "Closed").Id;
            var projectName = _context.Project.FirstOrDefault(p => p.Id == newTicketItem.ProjectId).Name;
            if (newTicketItem.IsAssigned == true && newTicketItem.StatusId != currentClosedStatusId)
            {
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket Assign",
                    TicketId = newTicketItem.Id,
                    Description = "You have a new ticket.",
                    Created = DateTime.Now,
                    SenderId = newTicketItem.OwnnerId,
                    RecipientId = newTicketItem.DeveloperId
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();


                string devEmail = (_context.Users.FirstOrDefault(u => u.Id == newTicketItem.DeveloperId)).Email;
                string subject = "New Ticket Assignment";
                string message = $"You have been Assigned a new ticket {newTicketItem.Name} about {newTicketItem.Description} for project: {projectName}";

                await _emailSender.SendEmailAsync(devEmail, subject, message);

            }
            //access project name


            //create notifocation for project manager on project through system notification and email
            //notification when current user is submitter
            if (IsSubmitter)
            {
                //notification for project manager on project
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket is Created by Submitter",
                    TicketId = newTicketItem.Id,
                    Description = $"New Ticket #{newTicketItem.Id} is Created by Submitter in {projectName} and Waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = newTicketItem.OwnnerId,
                    RecipientId = (_projectService.ProjectManagerOnProject(newTicketItem.ProjectId)).Id
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();

                //email to project manager about the notification
                string PMEmail = (_projectService.ProjectManagerOnProject(newTicketItem.ProjectId)).Email;
                string subject = "New Ticket Has Been Created by Submitter";
                string message = $"A new ticket {newTicketItem.Name} has been created by Submitter {user.FullName} about {newTicketItem.Description} for project: {projectName}, and waiting approval from you.";

                await _emailSender.SendEmailAsync(PMEmail, subject, message);

                //notification to current user
                Models.Notification notification2 = new Models.Notification
                {
                    Name = "You just Create a New Ticket",
                    TicketId = newTicketItem.Id,
                    Description = $"You just create a new ticket #{newTicketItem.Id} in project {projectName} and waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = (_projectService.ProjectManagerOnProject(newTicketItem.ProjectId)).Id,
                    RecipientId = newTicketItem.OwnnerId
                };
                _context.Notification.Add(notification2);
                _context.SaveChanges();

            }
            //create notifocation for project manager on project through system notification and email
            //notification when current user is developer
            else if (IsDeveloper)
            {
                //send notication to project manager on project
                Models.Notification notification = new Models.Notification
                {
                    Name = "New Ticket is Created by Developer",
                    TicketId = newTicketItem.Id,
                    Description = $"New Ticket #{newTicketItem.Id} is Created by Developer in {projectName} and Waiting for being Approve",
                    Created = DateTime.Now,
                    SenderId = newTicketItem.OwnnerId,
                    RecipientId = (_projectService.ProjectManagerOnProject(newTicketItem.ProjectId)).Id
                };
                _context.Notification.Add(notification);
                _context.SaveChanges();


                string PMEmail = (_projectService.ProjectManagerOnProject(newTicketItem.ProjectId)).Email;
                string subject = "New Ticket Has Been Created by Developer";
                string message = $"A new ticket {newTicketItem.Name} has been created by Developer {user.FullName} about {newTicketItem.Description} for project: {projectName}, and waiting approval from you.";

                await _emailSender.SendEmailAsync(PMEmail, subject, message);

                Models.Notification notification2 = new Models.Notification
                {
                    Name = "You just Create a New Ticket",
                    TicketId = newTicketItem.Id,
                    Description = $"You just create a new ticket #{newTicketItem.Id} in project {projectName} and waiting for being Assigned",
                    Created = DateTime.Now,
                    SenderId = (_projectService.ProjectManagerOnProject(newTicketItem.ProjectId)).Id,
                    RecipientId = newTicketItem.OwnnerId
                };
                _context.Notification.Add(notification2);
                _context.SaveChanges();
            }




            CancelCreateTicketDialog();
            await GetData();
            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);

        }
    }

    public async Task AddProject()
    {
        try
        {
            newProjectItem.Created = DateTime.Now;
            _context.Add(newProjectItem);
            _context.SaveChanges();
            await GetData();
            await CancelCreateProjectDialog();

            await JSRuntime.InvokeVoidAsync("success", null);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
        }
    }
    public async Task SendInvite()
    {
        var loginUser = user;
        Models.Company company = new Models.Company();
        if (IsInRoleAdmin)
        {
            company = new Models.Company
            {
                Name = newInvite.CompanyName,
                Description = $"This is a temporary description for Company: {newInvite.CompanyName}, you can change this description anytime."
            };
            _context.Company.Add(company);
            _context.SaveChanges();
        }
        else
        {
            company = _context.Company.FirstOrDefault(c => c.Id == loginUser.CompanyId);
        }

        newInvite.CompanyToken = Guid.NewGuid();
        newInvite.CompanyId = company.Id;
        var number_of_user_on_system = _context.Users.ToList().Count + 1;
        CustomUser newUser = new CustomUser
        {
            FirstName = "Invite",
            LastName = $"User #{number_of_user_on_system}",
            UserName = newInvite.Email,
            Email = newInvite.Email,
            EmailConfirmed = true,
            CompanyId = company.Id
        };
        try
        {
            var newUserFind = _context.Users.FirstOrDefault(u => u.Email == newUser.Email);
            if (newUserFind == null)
            {
                var result = await _userManager.CreateAsync(newUser, "Abc123!");
                if (result.Succeeded)
                {
                    string returnUrl = null;
                    returnUrl = "/";
                    var code = newInvite.CompanyToken;
                    string host = "https://" + _httpContextAccessor.HttpContext.Request.Host.ToString();
                    var callbackUrl = $"{host}/AcceptInvite/UserId/{newUser.Id}/Code/{code}";
                    var callbackUrl2 = _generator.GetUriByPage(_httpContextAccessor.HttpContext,
            "/AcceptInvite",
           values: new { UserId = newUser.Id, Code = code },
            scheme: _httpContextAccessor.HttpContext.Request.Scheme);

                    var callBackTest = HtmlEncoder.Default.Encode(callbackUrl);
                    //var callBackTest2 = HtmlEncoder.Default.Encode(callbackUrl2);
                    await _emailSender.SendEmailAsync(newUser.Email, "Invite Email From Lan's Bug Tracker",
        $"<h1>You received a invite ticket from Lan's Bug Tracker</h1> <br> <a style='background-color: #555555;border: none;color: white;padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;' href='{callbackUrl}'>Clicking here to join our software.</a>  <br> <h3>Your UserName is: {newUser.Email} </h3><br> <h3>Your Password is: Abc123!</h3>");

                    //     await _emailSender.SendEmailAsync(newUser.Email, "Invite Email From Lan's Bug Tracker",
                    //$"<h1>You received a invite ticket from Lan's Bug Tracker</h1> <br> <a style='background-color: #555555;border: none;color: white;padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;' href='{HtmlEncoder.Default.Encode(callbackUrl2)}'>Clicking here to join our software.</a>  <br> <h3>Your UserName is: {newUser.Email} </h3><br> <h3>Your Password is: Abc123!</h3>");

                    if (IsInRoleAdmin)
                    {
                        await _userManager.AddToRoleAsync(newUser, newInvite.Role);
                    }
                    else if (IsProjectManager)
                    {
                        await _userManager.AddToRoleAsync(newUser, newInvite.Role);
                    }
                    else
                    {
                        await _userManager.AddToRoleAsync(newUser, Roles.NewUser.ToString());
                    }
                    var admin = _context.Users.FirstOrDefault(u => u.Email == "arthastheking113@gmail.com");

                    List<string> userIdList = new List<string>();
                    userIdList.Add(newUser.Id);
                    if (IsInRoleAdmin)
                    {
                        var number_of_project_on_system = _context.Project.Count() + 1;
                        Models.Project project = new Models.Project
                        {
                            Name = $"Project Example #{number_of_project_on_system}",
                            Description = $"This is your project Example #{number_of_project_on_system}, you can change anything in this project anytime you want",
                            Created = DateTime.Now,
                            CompanyId = company.Id
                        };
                        _context.Project.Add(project);
                        _context.SaveChanges();

                        _projectService.AddUserToProject(userIdList, project.Id);
                    }
                    else if (IsProjectManager)
                    {
                        if (newInvite.ProjectId != 0)
                        {
                            var pm = _projectService.ProjectManagerOnProject(newInvite.ProjectId);
                            if (pm.Id == loginUser.Id)
                            {
                                _projectService.AddUserToProject(userIdList, newInvite.ProjectId);
                            }
                        }

                    }
                    if (!IsInRoleAdmin)
                    {
                        string adminEmail = admin.Email;
                        string subject = "New User Have Been Invited";
                        string message = $"{loginUser.FullName} just send a Invite Ticket to {newInvite.Email}";

                        await _emailSender.SendEmailAsync(adminEmail, subject, message);

                        _context.SaveChanges();
                    }
                    //notification for new user
                    WelcomeNotification welcomenotification = new WelcomeNotification
                    {
                        Name = "Welcome To The Bug Tracker",
                        Description = $"You have been Invited to the bug tracker service by {loginUser.FullName}. Your role is: {(_roleService.ReturnUserRole3(newUser))}. Please contact our admin or project manager ({loginUser.FullName}) by the inbox system.Or, you can start create new ticket and start working on it. You can change your name in profile setting under your name in the vertical Nav bar.",
                        Created = DateTime.Now,
                        SenderId = (admin).Id,
                        RecipientId = newUser.Id
                    };
                    _context.WelcomeNotification.Add(welcomenotification);
                    _context.SaveChanges();

                    //noification for admin
                    WelcomeNotification welcomenotification2 = new WelcomeNotification
                    {
                        Name = "New invite ticket has been sent",
                        Description = $"{loginUser.FullName} just send a Invite Ticket to {newInvite.Email}",
                        Created = DateTime.Now,
                        SenderId = (admin).Id,
                        RecipientId = (admin).Id
                    };
                    _context.WelcomeNotification.Add(welcomenotification2);
                    _context.SaveChanges();

                    //noification for person who send invite ticket
                    WelcomeNotification welcomenotification3 = new WelcomeNotification
                    {
                        Name = "New invite ticket has been sent",
                        Description = $"You just send a Invite Ticket to {newInvite.Email}",
                        Created = DateTime.Now,
                        SenderId = (admin).Id,
                        RecipientId = loginUser.Id
                    };
                    _context.WelcomeNotification.Add(welcomenotification3);
                    _context.SaveChanges();
                    newInvite.InvitorId = loginUser.Id;
                    newInvite.InviteeId = newUser.Id;
                    newInvite.InviteDate = DateTime.Now;
                    newInvite.IsValid = true;
                    _context.Add(newInvite);
                    _context.SaveChanges();

                    await CancelInviteDialog();

                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("errorUserExist", null);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("error", null);
            throw;
        }

        await JSRuntime.InvokeVoidAsync("success", null);
    }

    public void GetDataChart()
    {
        TicketTypeList = _context.TicketType.ToList();
        TicketPriorityList = _context.Priority.ToList();
        TicketStatusList = _context.Status.ToList();

        TicketTypeChart = new();
        TicketPriorityChart = new();
        TicketStatusChart = new();

        foreach (var item in TicketTypeList)
        {
            ChartModel newTicketType = new ChartModel
            {
                TicketCategory = item.Name,
                NumberOfTicket = AllItemList.Where(t => t.TicketTypeId == item.Id).ToList().Count
            };
            TicketTypeChart.Add(newTicketType);
        }
        foreach (var item in TicketPriorityList)
        {
            ChartModel newTicketPriority = new ChartModel
            {
                TicketCategory = item.Name,
                NumberOfTicket = AllItemList.Where(t => t.PriorityId == item.Id).ToList().Count
            };
            TicketPriorityChart.Add(newTicketPriority);
        }
        foreach (var item in TicketStatusList)
        {
            ChartModel newTicketStatus = new ChartModel
            {
                TicketCategory = item.Name,
                NumberOfTicket = AllItemList.Where(t => t.StatusId == item.Id).ToList().Count
            };
            TicketStatusChart.Add(newTicketStatus);
        }
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //user = await sessionStorage.GetItemAsync<CustomUser>("user");
        //IsInRoleAdmin = await sessionStorage.GetItemAsync<bool>("IsInRoleAdmin");
        //IsDeveloper = await sessionStorage.GetItemAsync<bool>("IsDeveloper");
        //IsNewUser = await sessionStorage.GetItemAsync<bool>("IsNewUser");
        //IsSubmitter = await sessionStorage.GetItemAsync<bool>("IsSubmitter");
        //IsProjectManager = await sessionStorage.GetItemAsync<bool>("IsProjectManager");
        if (firstRender)
        {
            //await JSRuntime.InvokeVoidAsync("enableTable", null);

        }
        _editModalWidth = await JSRuntime.InvokeAsync<int>("ScreenWidth", null);
        _editModalWidth = _editModalWidth * 0.5;
    }
}